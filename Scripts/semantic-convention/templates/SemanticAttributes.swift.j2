/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */
// DO **NOT** EDIT. This file is automatically generated.

{%- macro to_swift_return_type(type) -%}
  {%- if type == "string" -%}
    String
  {%- elif type == "string[]" -%}
    [String]
  {%- elif type == "boolean" -%}
    Bool
  {%- elif type == "number" -%}
    Int
  {%- elif type == "int" -%}
    Int
  {%- else -%}
    {{type}}
  {%- endif -%}
{%- endmacro %}
{%- macro print_value(type, value) -%}
  {{ "\"" if type == "String"}}{{value}}{{ "\"" if type == "String"}}
{%- endmacro %}

import Foundation

public enum {{enum}}: String {

    {%- for attribute in attributes | unique(attribute="fqn") %}
    {%- set class_name = attribute.fqn | to_camelcase(True) ~ "Values" %}
    /**
    {{attribute.brief | to_doc_brief}}.
    {%- if attribute.examples %}

    ~~~
    // Examples
    {%- for example in attribute.examples %}
    {%- if attribute.attr_type|lower == "string" %}
    attributes[.{{attribute.fqn | to_camelcase}}] = "{{example | replace("\"", "\\\"")}}"
    {%- else -%}
    attributes[.{{attribute.fqn | to_camelcase}}] = {{example}}
    {%- endif -%}
    {%- endfor %}
    ~~~
    {%- endif %}
    {%- if attribute.note %}

    - Note: {{attribute.note | to_doc_brief | indent(6, False)}}.
    {%- endif %}
    {%- if attribute.deprecated %}

    - Warning: Deprecated â€¢ {{attribute.deprecated | to_doc_brief}}.
    {%- endif %}

    {%- if attribute.is_enum %}
    - Requires: Value should be one of [`{{enum}}.{{class_name}}`](x-source-tag://otel{{class_name}}) (of type `{{to_swift_return_type(attribute.attr_type|lower)}}`)
    {% else %}
    - Requires: Value type should be `{{to_swift_return_type(attribute.attr_type|lower)}}`
    {% endif -%}
    */
    {%- if attribute.deprecated %}
    @available(*, deprecated)
    {%- endif %}
    case {{attribute.fqn | to_camelcase}} = "{{attribute.fqn}}"
    {%- endfor %}

    {%- if enum == "SemanticAttributes" %}

    // MARK: - Manual Definitions
    // Some definitions have not yet been added to the YAML which generates this script.
    // As such as we have some manually defined cases.

    /**
    An exception event **MUST** be called "exception" as per the [specification](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/exceptions.md).
    */
    case exception = "exception";
    {%- endif %}
    {% for attribute in attributes | unique(attribute="fqn") %}
    {%- set class_name = attribute.fqn | to_camelcase(True) ~ "Values" %}
    {%- set type = to_swift_return_type(attribute.attr_type.enum_type) %}
    {%- if attribute.is_enum %}
    /**
    {{attribute.brief | to_doc_brief}}.
    */
    /// - Tag: otel{{class_name}}
    {%- if attribute.attr_type.custom_values %}
    public struct {{class_name}}: CustomStringConvertible {
        {%- for member in attribute.attr_type.members %}
        /**
        {{member.brief | to_doc_brief}}.
        */
        public static let {{ member.member_id | to_camelcase }} = {{class_name}}({{ print_value(type, member.value) }})
        {%- endfor %}

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    {% else %}
    public enum {{class_name}}: {{ type }} {
        {%- for member in attribute.attr_type.members %}
        /**
        {{member.brief | to_doc_brief}}.
        */
        case {{ member.member_id | replace(".", "_") | replace("internal", "`internal`") }} = {{ print_value(type, member.value) }}
        {%- endfor %}
    }
    {% endif %}
    {%- endif %}
    {%- endfor %}
}

{%- if enum == "ResourceAttributes" %}
public func ==(left: ResourceAttributes, right: String) -> Bool {
    return left.rawValue == right
}

public func ==(left: String, right: ResourceAttributes) -> Bool {
    return left == right.rawValue
}
{% endif %}
