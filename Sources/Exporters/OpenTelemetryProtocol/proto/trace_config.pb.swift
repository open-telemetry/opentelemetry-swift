// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: opentelemetry/proto/trace/v1/trace_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Global configuration of the trace service. All fields must be specified, or
/// the default (zero) values will be used for each type.
public struct Opentelemetry_Proto_Trace_V1_TraceConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The global default sampler used to make decisions on span sampling.
  public var sampler: OneOf_Sampler? {
    get {return _storage._sampler}
    set {_uniqueStorage()._sampler = newValue}
  }

  public var constantSampler: Opentelemetry_Proto_Trace_V1_ConstantSampler {
    get {
      if case .constantSampler(let v)? = _storage._sampler {return v}
      return Opentelemetry_Proto_Trace_V1_ConstantSampler()
    }
    set {_uniqueStorage()._sampler = .constantSampler(newValue)}
  }

  public var probabilitySampler: Opentelemetry_Proto_Trace_V1_ProbabilitySampler {
    get {
      if case .probabilitySampler(let v)? = _storage._sampler {return v}
      return Opentelemetry_Proto_Trace_V1_ProbabilitySampler()
    }
    set {_uniqueStorage()._sampler = .probabilitySampler(newValue)}
  }

  public var rateLimitingSampler: Opentelemetry_Proto_Trace_V1_RateLimitingSampler {
    get {
      if case .rateLimitingSampler(let v)? = _storage._sampler {return v}
      return Opentelemetry_Proto_Trace_V1_RateLimitingSampler()
    }
    set {_uniqueStorage()._sampler = .rateLimitingSampler(newValue)}
  }

  /// The global default max number of attributes per span.
  public var maxNumberOfAttributes: Int64 {
    get {return _storage._maxNumberOfAttributes}
    set {_uniqueStorage()._maxNumberOfAttributes = newValue}
  }

  /// The global default max number of annotation events per span.
  public var maxNumberOfTimedEvents: Int64 {
    get {return _storage._maxNumberOfTimedEvents}
    set {_uniqueStorage()._maxNumberOfTimedEvents = newValue}
  }

  /// The global default max number of attributes per timed event.
  public var maxNumberOfAttributesPerTimedEvent: Int64 {
    get {return _storage._maxNumberOfAttributesPerTimedEvent}
    set {_uniqueStorage()._maxNumberOfAttributesPerTimedEvent = newValue}
  }

  /// The global default max number of link entries per span.
  public var maxNumberOfLinks: Int64 {
    get {return _storage._maxNumberOfLinks}
    set {_uniqueStorage()._maxNumberOfLinks = newValue}
  }

  /// The global default max number of attributes per span.
  public var maxNumberOfAttributesPerLink: Int64 {
    get {return _storage._maxNumberOfAttributesPerLink}
    set {_uniqueStorage()._maxNumberOfAttributesPerLink = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The global default sampler used to make decisions on span sampling.
  public enum OneOf_Sampler: Equatable {
    case constantSampler(Opentelemetry_Proto_Trace_V1_ConstantSampler)
    case probabilitySampler(Opentelemetry_Proto_Trace_V1_ProbabilitySampler)
    case rateLimitingSampler(Opentelemetry_Proto_Trace_V1_RateLimitingSampler)

  #if !swift(>=4.1)
    public static func ==(lhs: Opentelemetry_Proto_Trace_V1_TraceConfig.OneOf_Sampler, rhs: Opentelemetry_Proto_Trace_V1_TraceConfig.OneOf_Sampler) -> Bool {
      switch (lhs, rhs) {
      case (.constantSampler(let l), .constantSampler(let r)): return l == r
      case (.probabilitySampler(let l), .probabilitySampler(let r)): return l == r
      case (.rateLimitingSampler(let l), .rateLimitingSampler(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Sampler that always makes a constant decision on span sampling.
public struct Opentelemetry_Proto_Trace_V1_ConstantSampler {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var decision: Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision = .alwaysOff

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// How spans should be sampled:
  /// - Always off
  /// - Always on
  /// - Always follow the parent Span's decision (off if no parent).
  public enum ConstantDecision: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case alwaysOff // = 0
    case alwaysOn // = 1
    case alwaysParent // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .alwaysOff
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .alwaysOff
      case 1: self = .alwaysOn
      case 2: self = .alwaysParent
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .alwaysOff: return 0
      case .alwaysOn: return 1
      case .alwaysParent: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision] = [
    .alwaysOff,
    .alwaysOn,
    .alwaysParent,
  ]
}

#endif  // swift(>=4.2)

/// Sampler that tries to uniformly sample traces with a given probability.
/// The probability of sampling a trace is equal to that of the specified probability.
public struct Opentelemetry_Proto_Trace_V1_ProbabilitySampler {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The desired probability of sampling. Must be within [0.0, 1.0].
  public var samplingProbability: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Sampler that tries to sample with a rate per time window.
public struct Opentelemetry_Proto_Trace_V1_RateLimitingSampler {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Rate per second.
  public var qps: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opentelemetry.proto.trace.v1"

extension Opentelemetry_Proto_Trace_V1_TraceConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TraceConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "constant_sampler"),
    2: .standard(proto: "probability_sampler"),
    3: .standard(proto: "rate_limiting_sampler"),
    4: .standard(proto: "max_number_of_attributes"),
    5: .standard(proto: "max_number_of_timed_events"),
    6: .standard(proto: "max_number_of_attributes_per_timed_event"),
    7: .standard(proto: "max_number_of_links"),
    8: .standard(proto: "max_number_of_attributes_per_link"),
  ]

  fileprivate class _StorageClass {
    var _sampler: Opentelemetry_Proto_Trace_V1_TraceConfig.OneOf_Sampler?
    var _maxNumberOfAttributes: Int64 = 0
    var _maxNumberOfTimedEvents: Int64 = 0
    var _maxNumberOfAttributesPerTimedEvent: Int64 = 0
    var _maxNumberOfLinks: Int64 = 0
    var _maxNumberOfAttributesPerLink: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sampler = source._sampler
      _maxNumberOfAttributes = source._maxNumberOfAttributes
      _maxNumberOfTimedEvents = source._maxNumberOfTimedEvents
      _maxNumberOfAttributesPerTimedEvent = source._maxNumberOfAttributesPerTimedEvent
      _maxNumberOfLinks = source._maxNumberOfLinks
      _maxNumberOfAttributesPerLink = source._maxNumberOfAttributesPerLink
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Opentelemetry_Proto_Trace_V1_ConstantSampler?
          if let current = _storage._sampler {
            try decoder.handleConflictingOneOf()
            if case .constantSampler(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._sampler = .constantSampler(v)}
        case 2:
          var v: Opentelemetry_Proto_Trace_V1_ProbabilitySampler?
          if let current = _storage._sampler {
            try decoder.handleConflictingOneOf()
            if case .probabilitySampler(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._sampler = .probabilitySampler(v)}
        case 3:
          var v: Opentelemetry_Proto_Trace_V1_RateLimitingSampler?
          if let current = _storage._sampler {
            try decoder.handleConflictingOneOf()
            if case .rateLimitingSampler(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._sampler = .rateLimitingSampler(v)}
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._maxNumberOfAttributes)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._maxNumberOfTimedEvents)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._maxNumberOfAttributesPerTimedEvent)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._maxNumberOfLinks)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._maxNumberOfAttributesPerLink)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._sampler {
      case .constantSampler(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .probabilitySampler(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .rateLimitingSampler(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
      if _storage._maxNumberOfAttributes != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxNumberOfAttributes, fieldNumber: 4)
      }
      if _storage._maxNumberOfTimedEvents != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxNumberOfTimedEvents, fieldNumber: 5)
      }
      if _storage._maxNumberOfAttributesPerTimedEvent != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxNumberOfAttributesPerTimedEvent, fieldNumber: 6)
      }
      if _storage._maxNumberOfLinks != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxNumberOfLinks, fieldNumber: 7)
      }
      if _storage._maxNumberOfAttributesPerLink != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxNumberOfAttributesPerLink, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opentelemetry_Proto_Trace_V1_TraceConfig, rhs: Opentelemetry_Proto_Trace_V1_TraceConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sampler != rhs_storage._sampler {return false}
        if _storage._maxNumberOfAttributes != rhs_storage._maxNumberOfAttributes {return false}
        if _storage._maxNumberOfTimedEvents != rhs_storage._maxNumberOfTimedEvents {return false}
        if _storage._maxNumberOfAttributesPerTimedEvent != rhs_storage._maxNumberOfAttributesPerTimedEvent {return false}
        if _storage._maxNumberOfLinks != rhs_storage._maxNumberOfLinks {return false}
        if _storage._maxNumberOfAttributesPerLink != rhs_storage._maxNumberOfAttributesPerLink {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opentelemetry_Proto_Trace_V1_ConstantSampler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConstantSampler"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decision"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.decision)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.decision != .alwaysOff {
      try visitor.visitSingularEnumField(value: self.decision, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opentelemetry_Proto_Trace_V1_ConstantSampler, rhs: Opentelemetry_Proto_Trace_V1_ConstantSampler) -> Bool {
    if lhs.decision != rhs.decision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALWAYS_OFF"),
    1: .same(proto: "ALWAYS_ON"),
    2: .same(proto: "ALWAYS_PARENT"),
  ]
}

extension Opentelemetry_Proto_Trace_V1_ProbabilitySampler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProbabilitySampler"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "samplingProbability"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.samplingProbability)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.samplingProbability != 0 {
      try visitor.visitSingularDoubleField(value: self.samplingProbability, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opentelemetry_Proto_Trace_V1_ProbabilitySampler, rhs: Opentelemetry_Proto_Trace_V1_ProbabilitySampler) -> Bool {
    if lhs.samplingProbability != rhs.samplingProbability {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opentelemetry_Proto_Trace_V1_RateLimitingSampler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RateLimitingSampler"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "qps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.qps)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.qps != 0 {
      try visitor.visitSingularInt64Field(value: self.qps, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opentelemetry_Proto_Trace_V1_RateLimitingSampler, rhs: Opentelemetry_Proto_Trace_V1_RateLimitingSampler) -> Bool {
    if lhs.qps != rhs.qps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
