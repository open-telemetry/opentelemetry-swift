//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: opentelemetry/proto/collector/trace/v1/trace_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClient, then call methods of this protocol to make API calls.
public protocol Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientProtocol {
  func export(_ request: Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, callOptions: CallOptions?) -> UnaryCall<Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse>
}

public final class Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClient: GRPCClient, Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the opentelemetry.proto.collector.trace.v1.TraceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// For performance reasons, it is recommended to keep this RPC
  /// alive for the entire life of the application.
  ///
  /// - Parameters:
  ///   - request: Request to send to Export.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func export(_ request: Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse> {
    return self.makeUnaryCall(path: "/opentelemetry.proto.collector.trace.v1.TraceService/Export",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Opentelemetry_Proto_Collector_Trace_V1_TraceServiceProvider: CallHandlerProvider {
  /// For performance reasons, it is recommended to keep this RPC
  /// alive for the entire life of the application.
  func export(request: Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse>
}

extension Opentelemetry_Proto_Collector_Trace_V1_TraceServiceProvider {
  public var serviceName: String { return "opentelemetry.proto.collector.trace.v1.TraceService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Export":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.export(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload`
extension Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest: GRPCProtobufPayload {}
extension Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse: GRPCProtobufPayload {}
