/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */
// DO **NOT** EDIT. This file is automatically generated.

import Foundation

public enum SemanticAttributes: String {
    /**
    The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.

    ~~~
    // Examples
    attributes[.exceptionType] = "java.net.ConnectException"
    attributes[.exceptionType] = "OSError"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionType = "exception.type"
    /**
    The exception message.

    ~~~
    // Examples
    attributes[.exceptionMessage] = "Division by zero"
    attributes[.exceptionMessage] = "Can't convert 'int' object to str implicitly"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionMessage = "exception.message"
    /**
    A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.

    ~~~
    // Examples
    attributes[.exceptionStacktrace] = "Exception in thread \"main\" java.lang.RuntimeException: Test exception\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionStacktrace = "exception.stacktrace"
    /**
    HTTP request method.

    ~~~
    // Examples
    attributes[.httpMethod] = "GET"
    attributes[.httpMethod] = "POST"
    attributes[.httpMethod] = "HEAD"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpMethod = "http.method"
    /**
    [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).

    ~~~
    // Examplesattributes[.httpStatusCode] = 200
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpStatusCode = "http.status_code"
    /**
    Kind of HTTP protocol used.
    - Requires: Value should be one of [`SemanticAttributes.HttpFlavorValues`](x-source-tag://otelHttpFlavorValues) (of type `String`)
    */
    case httpFlavor = "http.flavor"
    /**
    Host identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.

    ~~~
    // Examples
    attributes[.netPeerName] = "example.com"
    ~~~

    - Note: Determined by using the first of the following that applies

      - Host identifier of the [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource)
        if it's sent in absolute-form
      - Host identifier of the `Host` header

      SHOULD NOT be set if capturing it would require an extra DNS lookup.
    - Requires: Value type should be `String`
    */
    case netPeerName = "net.peer.name"
    /**
    Port identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.

    ~~~
    // Examplesattributes[.netPeerPort] = 80attributes[.netPeerPort] = 8080attributes[.netPeerPort] = 443
    ~~~

    - Note: When [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource) is absolute URI, `net.peer.name` MUST match URI port identifier, otherwise it MUST match `Host` header port identifier.
    - Requires: Value type should be `Int`
    */
    case netPeerPort = "net.peer.port"
    /**
    The URI scheme identifying the used protocol.

    ~~~
    // Examples
    attributes[.httpScheme] = "http"
    attributes[.httpScheme] = "https"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpScheme = "http.scheme"
    /**
    The matched route (path template in the format used by the respective server framework). See note below.

    ~~~
    // Examples
    attributes[.httpRoute] = "/users/:userID?"
    attributes[.httpRoute] = "{controller}/{action}/{id?}"
    ~~~

    - Note: MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/specification/trace/semantic_conventions/http.md#http-server-definitions) if there is one.
    - Requires: Value type should be `String`
    */
    case httpRoute = "http.route"
    /**
    Name of the local HTTP server that received the request.

    ~~~
    // Examples
    attributes[.netHostName] = "localhost"
    ~~~

    - Note: Determined by using the first of the following that applies

      - The [primary server name](/specification/trace/semantic_conventions/http.md#http-server-definitions) of the matched virtual host. MUST only
        include host identifier.
      - Host identifier of the [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource)
        if it's sent in absolute-form.
      - Host identifier of the `Host` header

      SHOULD NOT be set if only IP address is available and capturing name would require a reverse DNS lookup.
    - Requires: Value type should be `String`
    */
    case netHostName = "net.host.name"
    /**
    Port of the local HTTP server that received the request.

    ~~~
    // Examplesattributes[.netHostPort] = 8080
    ~~~

    - Note: Determined by using the first of the following that applies

      - Port identifier of the [primary server host](/specification/trace/semantic_conventions/http.md#http-server-definitions) of the matched virtual host.
      - Port identifier of the [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource)
        if it's sent in absolute-form.
      - Port identifier of the `Host` header.
    - Requires: Value type should be `Int`
    */
    case netHostPort = "net.host.port"
    /**
    The name identifies the event.

    ~~~
    // Examples
    attributes[.eventName] = "click"
    attributes[.eventName] = "exception"
    ~~~
    - Requires: Value type should be `String`
    */
    case eventName = "event.name"
    /**
    The domain identifies the business context for the events.

    - Note: Events across different domains may have same `event.name`, yet be
      unrelated events.
    - Requires: Value should be one of [`SemanticAttributes.EventDomainValues`](x-source-tag://otelEventDomainValues) (of type `String`)
    */
    case eventDomain = "event.domain"
    /**
    The unique identifier of the feature flag.

    ~~~
    // Examples
    attributes[.featureFlagKey] = "logo-color"
    ~~~
    - Requires: Value type should be `String`
    */
    case featureFlagKey = "feature_flag.key"
    /**
    The name of the service provider that performs the flag evaluation.

    ~~~
    // Examples
    attributes[.featureFlagProviderName] = "Flag Manager"
    ~~~
    - Requires: Value type should be `String`
    */
    case featureFlagProviderName = "feature_flag.provider_name"
    /**
    SHOULD be a semantic identifier for a value. If one is unavailable, a stringified version of the value can be used.

    ~~~
    // Examples
    attributes[.featureFlagVariant] = "red"
    attributes[.featureFlagVariant] = "true"
    attributes[.featureFlagVariant] = "on"
    ~~~

    - Note: A semantic identifier, commonly referred to as a variant, provides a means
      for referring to a value without including the value itself. This can
      provide additional context for understanding the meaning behind a value.
      For example, the variant `red` maybe be used for the value `#c05543`.

      A stringified version of the value can be used in situations where a
      semantic identifier is unavailable. String representation of the value
      should be determined by the implementer.
    - Requires: Value type should be `String`
    */
    case featureFlagVariant = "feature_flag.variant"
    /**
    The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).

    ~~~
    // Examples
    attributes[.awsLambdaInvokedArn] = "arn:aws:lambda:us-east-1:123456:function:myfunction:myalias"
    ~~~

    - Note: This may be different from `cloud.resource_id` if an alias is involved.
    - Requires: Value type should be `String`
    */
    case awsLambdaInvokedArn = "aws.lambda.invoked_arn"
    /**
    The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.

    ~~~
    // Examples
    attributes[.cloudeventsEventId] = "123e4567-e89b-12d3-a456-426614174000"
    attributes[.cloudeventsEventId] = "0001"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventId = "cloudevents.event_id"
    /**
    The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.

    ~~~
    // Examples
    attributes[.cloudeventsEventSource] = "https://github.com/cloudevents"
    attributes[.cloudeventsEventSource] = "/cloudevents/spec/pull/123"
    attributes[.cloudeventsEventSource] = "my-service"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventSource = "cloudevents.event_source"
    /**
    The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.

    ~~~
    // Examples
    attributes[.cloudeventsEventSpecVersion] = "1.0"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventSpecVersion = "cloudevents.event_spec_version"
    /**
    The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.

    ~~~
    // Examples
    attributes[.cloudeventsEventType] = "com.github.pull_request.opened"
    attributes[.cloudeventsEventType] = "com.example.object.deleted.v2"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventType = "cloudevents.event_type"
    /**
    The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).

    ~~~
    // Examples
    attributes[.cloudeventsEventSubject] = "mynewfile.jpg"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventSubject = "cloudevents.event_subject"
    /**
    Parent-child Reference type.

    - Note: The causal relationship between a child Span and a parent Span.
    - Requires: Value should be one of [`SemanticAttributes.OpentracingRefTypeValues`](x-source-tag://otelOpentracingRefTypeValues) (of type `String`)
    */
    case opentracingRefType = "opentracing.ref_type"
    /**
    An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
    - Requires: Value should be one of [`SemanticAttributes.DbSystemValues`](x-source-tag://otelDbSystemValues) (of type `String`)
    */
    case dbSystem = "db.system"
    /**
    The connection string used to connect to the database. It is recommended to remove embedded credentials.

    ~~~
    // Examples
    attributes[.dbConnectionString] = "Server=(localdb)\v11.0;Integrated Security=true;"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbConnectionString = "db.connection_string"
    /**
    Username for accessing the database.

    ~~~
    // Examples
    attributes[.dbUser] = "readonly_user"
    attributes[.dbUser] = "reporting_user"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbUser = "db.user"
    /**
    The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.

    ~~~
    // Examples
    attributes[.dbJdbcDriverClassname] = "org.postgresql.Driver"
    attributes[.dbJdbcDriverClassname] = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbJdbcDriverClassname = "db.jdbc.driver_classname"
    /**
    This attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).

    ~~~
    // Examples
    attributes[.dbName] = "customers"
    attributes[.dbName] = "main"
    ~~~

    - Note: In some SQL databases, the database name to be used is called "schema name". In case there are multiple layers that could be considered for database name (e.g. Oracle instance name and schema name), the database name to be used is the more specific layer (e.g. Oracle schema name).
    - Requires: Value type should be `String`
    */
    case dbName = "db.name"
    /**
    The database statement being executed.

    ~~~
    // Examples
    attributes[.dbStatement] = "SELECT * FROM wuser_table"
    attributes[.dbStatement] = "SET mykey \"WuValue\""
    ~~~

    - Note: The value may be sanitized to exclude sensitive information.
    - Requires: Value type should be `String`
    */
    case dbStatement = "db.statement"
    /**
    The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.

    ~~~
    // Examples
    attributes[.dbOperation] = "findAndModify"
    attributes[.dbOperation] = "HMSET"
    attributes[.dbOperation] = "SELECT"
    ~~~

    - Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.
    - Requires: Value type should be `String`
    */
    case dbOperation = "db.operation"
    /**
    Remote socket peer address: IPv4 or IPv6 for internet protocols, path for local communication, [etc](https://man7.org/linux/man-pages/man7/address_families.7.html).

    ~~~
    // Examples
    attributes[.netSockPeerAddr] = "127.0.0.1"
    attributes[.netSockPeerAddr] = "/tmp/mysql.sock"
    ~~~
    - Requires: Value type should be `String`
    */
    case netSockPeerAddr = "net.sock.peer.addr"
    /**
    Remote socket peer port.

    ~~~
    // Examplesattributes[.netSockPeerPort] = 16456
    ~~~
    - Requires: Value type should be `Int`
    */
    case netSockPeerPort = "net.sock.peer.port"
    /**
    Protocol [address family](https://man7.org/linux/man-pages/man7/address_families.7.html) which is used for communication.

    ~~~
    // Examples
    attributes[.netSockFamily] = "inet6"
    attributes[.netSockFamily] = "bluetooth"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetSockFamilyValues`](x-source-tag://otelNetSockFamilyValues) (of type `String`)
    */
    case netSockFamily = "net.sock.family"
    /**
    Remote socket peer name.

    ~~~
    // Examples
    attributes[.netSockPeerName] = "proxy.example.com"
    ~~~
    - Requires: Value type should be `String`
    */
    case netSockPeerName = "net.sock.peer.name"
    /**
    Transport protocol used. See note below.
    - Requires: Value should be one of [`SemanticAttributes.NetTransportValues`](x-source-tag://otelNetTransportValues) (of type `String`)
    */
    case netTransport = "net.transport"
    /**
    The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.

    ~~~
    // Examples
    attributes[.dbMssqlInstanceName] = "MSSQLSERVER"
    ~~~

    - Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).
    - Requires: Value type should be `String`
    */
    case dbMssqlInstanceName = "db.mssql.instance_name"
    /**
    The fetch size used for paging, i.e. how many rows will be returned at once.

    ~~~
    // Examplesattributes[.dbCassandraPageSize] = 5000
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbCassandraPageSize = "db.cassandra.page_size"
    /**
    The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
    - Requires: Value should be one of [`SemanticAttributes.DbCassandraConsistencyLevelValues`](x-source-tag://otelDbCassandraConsistencyLevelValues) (of type `String`)
    */
    case dbCassandraConsistencyLevel = "db.cassandra.consistency_level"
    /**
    The name of the primary table that the operation is acting upon, including the keyspace name (if applicable).

    ~~~
    // Examples
    attributes[.dbCassandraTable] = "mytable"
    ~~~

    - Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
    - Requires: Value type should be `String`
    */
    case dbCassandraTable = "db.cassandra.table"
    /**
    Whether or not the query is idempotent.
    - Requires: Value type should be `Bool`
    */
    case dbCassandraIdempotence = "db.cassandra.idempotence"
    /**
    The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.

    ~~~
    // Examplesattributes[.dbCassandraSpeculativeExecutionCount] = 0attributes[.dbCassandraSpeculativeExecutionCount] = 2
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbCassandraSpeculativeExecutionCount = "db.cassandra.speculative_execution_count"
    /**
    The ID of the coordinating node for a query.

    ~~~
    // Examples
    attributes[.dbCassandraCoordinatorId] = "be13faa2-8574-4d71-926d-27f16cf8a7af"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCassandraCoordinatorId = "db.cassandra.coordinator.id"
    /**
    The data center of the coordinating node for a query.

    ~~~
    // Examples
    attributes[.dbCassandraCoordinatorDc] = "us-west-2"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCassandraCoordinatorDc = "db.cassandra.coordinator.dc"
    /**
    The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.

    ~~~
    // Examplesattributes[.dbRedisDatabaseIndex] = 0attributes[.dbRedisDatabaseIndex] = 1attributes[.dbRedisDatabaseIndex] = 15
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbRedisDatabaseIndex = "db.redis.database_index"
    /**
    The collection being accessed within the database stated in `db.name`.

    ~~~
    // Examples
    attributes[.dbMongodbCollection] = "customers"
    attributes[.dbMongodbCollection] = "products"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbMongodbCollection = "db.mongodb.collection"
    /**
    The name of the primary table that the operation is acting upon, including the database name (if applicable).

    ~~~
    // Examples
    attributes[.dbSqlTable] = "public.users"
    attributes[.dbSqlTable] = "customers"
    ~~~

    - Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
    - Requires: Value type should be `String`
    */
    case dbSqlTable = "db.sql.table"
    /**
    Name of the code, either "OK" or "ERROR". MUST NOT be set if the status code is UNSET.
    - Requires: Value should be one of [`SemanticAttributes.OtelStatusCodeValues`](x-source-tag://otelOtelStatusCodeValues) (of type `String`)
    */
    case otelStatusCode = "otel.status_code"
    /**
    Description of the Status if it has a value, otherwise not set.

    ~~~
    // Examples
    attributes[.otelStatusDescription] = "resource not found"
    ~~~
    - Requires: Value type should be `String`
    */
    case otelStatusDescription = "otel.status_description"
    /**
    Type of the trigger which caused this function invocation.

    - Note: For the server/consumer span on the incoming side,
      `faas.trigger` MUST be set.

      Clients invoking FaaS instances usually cannot set `faas.trigger`,
      since they would typically need to look in the payload to determine
      the event type. If clients set it, it should be the same as the
      trigger that corresponding incoming would have (i.e., this has
      nothing to do with the underlying transport used to make the API
      call to invoke the lambda, which is often HTTP).
    - Requires: Value should be one of [`SemanticAttributes.FaasTriggerValues`](x-source-tag://otelFaasTriggerValues) (of type `String`)
    */
    case faasTrigger = "faas.trigger"
    /**
    The invocation ID of the current function invocation.

    ~~~
    // Examples
    attributes[.faasInvocationId] = "af9d5aa4-a685-4c5f-a22b-444f80b3cc28"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasInvocationId = "faas.invocation_id"
    /**
    Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/en-us/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP).

    ~~~
    // Examples
    attributes[.cloudResourceId] = "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function"
    attributes[.cloudResourceId] = "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID"
    attributes[.cloudResourceId] = "/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
    ~~~

    - Note: On some cloud providers, it may not be possible to determine the full ID at startup,
      so it may be necessary to set `cloud.resource_id` as a span attribute instead.

      The exact value to use for `cloud.resource_id` depends on the cloud provider.
      The following well-known definitions MUST be used if you set this attribute and they apply:

      * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        Take care not to use the "invoked ARN" directly but replace any
        [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)
        with the resolved function version, as the same runtime instance may be invokable with
        multiple different aliases.
      * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
      * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id) of the invoked function,
        *not* the function app, having the form
        `/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.
        This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        a TracerProvider.
    - Requires: Value type should be `String`
    */
    case cloudResourceId = "cloud.resource_id"
    /**
    The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.

    ~~~
    // Examples
    attributes[.faasDocumentCollection] = "myBucketName"
    attributes[.faasDocumentCollection] = "myDbName"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentCollection = "faas.document.collection"
    /**
    Describes the type of the operation that was performed on the data.
    - Requires: Value should be one of [`SemanticAttributes.FaasDocumentOperationValues`](x-source-tag://otelFaasDocumentOperationValues) (of type `String`)
    */
    case faasDocumentOperation = "faas.document.operation"
    /**
    A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).

    ~~~
    // Examples
    attributes[.faasDocumentTime] = "2020-01-23T13:47:06Z"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentTime = "faas.document.time"
    /**
    The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.

    ~~~
    // Examples
    attributes[.faasDocumentName] = "myFile.txt"
    attributes[.faasDocumentName] = "myTableName"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentName = "faas.document.name"
    /**
    The full request target as passed in a HTTP request line or equivalent.

    ~~~
    // Examples
    attributes[.httpTarget] = "/path/12314/?q=ddds"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpTarget = "http.target"
    /**
    The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).

    ~~~
    // Examples
    attributes[.httpClientIp] = "83.164.160.102"
    ~~~

    - Note: This is not necessarily the same as `net.sock.peer.addr`, which would
      identify the network-level peer, which may be a proxy.

      This attribute should be set when a source of information different
      from the one used for `net.sock.peer.addr`, is available even if that other
      source just confirms the same value as `net.sock.peer.addr`.
      Rationale: For `net.sock.peer.addr`, one typically does not know if it
      comes from a proxy, reverse proxy, or the actual client. Setting
      `http.client_ip` when it's the same as `net.sock.peer.addr` means that
      one is at least somewhat confident that the address is not that of
      the closest proxy.
    - Requires: Value type should be `String`
    */
    case httpClientIp = "http.client_ip"
    /**
    Local socket address. Useful in case of a multi-IP host.

    ~~~
    // Examples
    attributes[.netSockHostAddr] = "192.168.0.1"
    ~~~
    - Requires: Value type should be `String`
    */
    case netSockHostAddr = "net.sock.host.addr"
    /**
    Local socket port number.

    ~~~
    // Examplesattributes[.netSockHostPort] = 35555
    ~~~
    - Requires: Value type should be `Int`
    */
    case netSockHostPort = "net.sock.host.port"
    /**
    A string identifying the messaging system.

    ~~~
    // Examples
    attributes[.messagingSystem] = "kafka"
    attributes[.messagingSystem] = "rabbitmq"
    attributes[.messagingSystem] = "rocketmq"
    attributes[.messagingSystem] = "activemq"
    attributes[.messagingSystem] = "AmazonSQS"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingSystem = "messaging.system"
    /**
    A string identifying the kind of messaging operation as defined in the [Operation names](#operation-names) section above.

    - Note: If a custom value is used, it MUST be of low cardinality.
    - Requires: Value should be one of [`SemanticAttributes.MessagingOperationValues`](x-source-tag://otelMessagingOperationValues) (of type `String`)
    */
    case messagingOperation = "messaging.operation"
    /**
    The number of messages sent, received, or processed in the scope of the batching operation.

    ~~~
    // Examplesattributes[.messagingBatchMessageCount] = 0attributes[.messagingBatchMessageCount] = 1attributes[.messagingBatchMessageCount] = 2
    ~~~

    - Note: Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    - Requires: Value type should be `Int`
    */
    case messagingBatchMessageCount = "messaging.batch.message_count"
    /**
    A value used by the messaging system as an identifier for the message, represented as a string.

    ~~~
    // Examples
    attributes[.messagingMessageId] = "452a7c7c7c7048c2f887f61572b18fc2"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingMessageId = "messaging.message.id"
    /**
    The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".

    ~~~
    // Examples
    attributes[.messagingMessageConversationId] = "MyConversationId"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingMessageConversationId = "messaging.message.conversation_id"
    /**
    The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.

    ~~~
    // Examplesattributes[.messagingMessagePayloadSizeBytes] = 2738
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingMessagePayloadSizeBytes = "messaging.message.payload_size_bytes"
    /**
    The compressed size of the message payload in bytes.

    ~~~
    // Examplesattributes[.messagingMessagePayloadCompressedSizeBytes] = 2048
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingMessagePayloadCompressedSizeBytes = "messaging.message.payload_compressed_size_bytes"
    /**
    Application layer protocol used. The value SHOULD be normalized to lowercase.

    ~~~
    // Examples
    attributes[.netAppProtocolName] = "amqp"
    attributes[.netAppProtocolName] = "mqtt"
    ~~~
    - Requires: Value type should be `String`
    */
    case netAppProtocolName = "net.app.protocol.name"
    /**
    Version of the application layer protocol used. See note below.

    ~~~
    // Examples
    attributes[.netAppProtocolVersion] = "3.1.1"
    ~~~

    - Note: `net.app.protocol.version` refers to the version of the protocol used and might be different from the protocol client's version. If the HTTP client used has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.
    - Requires: Value type should be `String`
    */
    case netAppProtocolVersion = "net.app.protocol.version"
    /**
    The internet connection type currently being used by the host.

    ~~~
    // Examples
    attributes[.netHostConnectionType] = "wifi"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetHostConnectionTypeValues`](x-source-tag://otelNetHostConnectionTypeValues) (of type `String`)
    */
    case netHostConnectionType = "net.host.connection.type"
    /**
    This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.

    ~~~
    // Examples
    attributes[.netHostConnectionSubtype] = "LTE"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetHostConnectionSubtypeValues`](x-source-tag://otelNetHostConnectionSubtypeValues) (of type `String`)
    */
    case netHostConnectionSubtype = "net.host.connection.subtype"
    /**
    The name of the mobile carrier.

    ~~~
    // Examples
    attributes[.netHostCarrierName] = "sprint"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostCarrierName = "net.host.carrier.name"
    /**
    The mobile carrier country code.

    ~~~
    // Examples
    attributes[.netHostCarrierMcc] = "310"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostCarrierMcc = "net.host.carrier.mcc"
    /**
    The mobile carrier network code.

    ~~~
    // Examples
    attributes[.netHostCarrierMnc] = "001"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostCarrierMnc = "net.host.carrier.mnc"
    /**
    The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.

    ~~~
    // Examples
    attributes[.netHostCarrierIcc] = "DE"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostCarrierIcc = "net.host.carrier.icc"
    /**
    A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).

    ~~~
    // Examples
    attributes[.faasTime] = "2020-01-23T13:47:06Z"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasTime = "faas.time"
    /**
    A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).

    ~~~
    // Examples
    attributes[.faasCron] = "0/5 * * * ? *"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasCron = "faas.cron"
    /**
    A boolean that is true if the serverless function is executed for the first time (aka cold-start).
    - Requires: Value type should be `Bool`
    */
    case faasColdstart = "faas.coldstart"
    /**
    The name of the invoked function.

    ~~~
    // Examples
    attributes[.faasInvokedName] = "my-function"
    ~~~

    - Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.
    - Requires: Value type should be `String`
    */
    case faasInvokedName = "faas.invoked_name"
    /**
    The cloud provider of the invoked function.

    - Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
    - Requires: Value should be one of [`SemanticAttributes.FaasInvokedProviderValues`](x-source-tag://otelFaasInvokedProviderValues) (of type `String`)
    */
    case faasInvokedProvider = "faas.invoked_provider"
    /**
    The cloud region of the invoked function.

    ~~~
    // Examples
    attributes[.faasInvokedRegion] = "eu-central-1"
    ~~~

    - Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.
    - Requires: Value type should be `String`
    */
    case faasInvokedRegion = "faas.invoked_region"
    /**
    The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.

    ~~~
    // Examples
    attributes[.peerService] = "AuthTokenCache"
    ~~~
    - Requires: Value type should be `String`
    */
    case peerService = "peer.service"
    /**
    Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.

    ~~~
    // Examples
    attributes[.enduserId] = "username"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserId = "enduser.id"
    /**
    Actual/assumed role the client is making the request under extracted from token or application security context.

    ~~~
    // Examples
    attributes[.enduserRole] = "admin"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserRole = "enduser.role"
    /**
    Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).

    ~~~
    // Examples
    attributes[.enduserScope] = "read:message, write:files"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserScope = "enduser.scope"
    /**
    Current "managed" thread ID (as opposed to OS thread ID).

    ~~~
    // Examplesattributes[.threadId] = 42
    ~~~
    - Requires: Value type should be `Int`
    */
    case threadId = "thread.id"
    /**
    Current thread name.

    ~~~
    // Examples
    attributes[.threadName] = "main"
    ~~~
    - Requires: Value type should be `String`
    */
    case threadName = "thread.name"
    /**
    The method or function name, or equivalent (usually rightmost part of the code unit's name).

    ~~~
    // Examples
    attributes[.codeFunction] = "serveRequest"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeFunction = "code.function"
    /**
    The "namespace" within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.

    ~~~
    // Examples
    attributes[.codeNamespace] = "com.example.MyHttpService"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeNamespace = "code.namespace"
    /**
    The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).

    ~~~
    // Examples
    attributes[.codeFilepath] = "/usr/local/MyApplication/content_root/app/index.php"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeFilepath = "code.filepath"
    /**
    The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.

    ~~~
    // Examplesattributes[.codeLineno] = 42
    ~~~
    - Requires: Value type should be `Int`
    */
    case codeLineno = "code.lineno"
    /**
    The column number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.

    ~~~
    // Examplesattributes[.codeColumn] = 16
    ~~~
    - Requires: Value type should be `Int`
    */
    case codeColumn = "code.column"
    /**
    The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.

    ~~~
    // Examplesattributes[.httpRequestContentLength] = 3495
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpRequestContentLength = "http.request_content_length"
    /**
    The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.

    ~~~
    // Examplesattributes[.httpResponseContentLength] = 3495
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpResponseContentLength = "http.response_content_length"
    /**
    Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.

    ~~~
    // Examples
    attributes[.userAgentOriginal] = "CERN-LineMode/2.15 libwww/2.17b3"
    ~~~
    - Requires: Value type should be `String`
    */
    case userAgentOriginal = "user_agent.original"
    /**
    Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.

    ~~~
    // Examples
    attributes[.httpUrl] = "https://www.foo.bar/search?q=OpenTelemetry#SemConv"
    ~~~

    - Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute's value should be `https://www.example.com/`.
    - Requires: Value type should be `String`
    */
    case httpUrl = "http.url"
    /**
    The ordinal number of request resending attempt (for any reason, including redirects).

    ~~~
    // Examplesattributes[.httpResendCount] = 3
    ~~~

    - Note: The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).
    - Requires: Value type should be `Int`
    */
    case httpResendCount = "http.resend_count"
    /**
    The value `aws-api`.

    ~~~
    // Examples
    attributes[.rpcSystem] = "aws-api"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.RpcSystemValues`](x-source-tag://otelRpcSystemValues) (of type `String`)
    */
    case rpcSystem = "rpc.system"
    /**
    The name of the service to which a request is made, as returned by the AWS SDK.

    ~~~
    // Examples
    attributes[.rpcService] = "DynamoDB"
    attributes[.rpcService] = "S3"
    ~~~

    - Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    - Requires: Value type should be `String`
    */
    case rpcService = "rpc.service"
    /**
    The name of the operation corresponding to the request, as returned by the AWS SDK.

    ~~~
    // Examples
    attributes[.rpcMethod] = "GetItem"
    attributes[.rpcMethod] = "PutItem"
    ~~~

    - Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    - Requires: Value type should be `String`
    */
    case rpcMethod = "rpc.method"
    /**
    The keys in the `RequestItems` object field.

    ~~~
    // Examplesattributes[.awsDynamodbTableNames] = Usersattributes[.awsDynamodbTableNames] = Cats
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbTableNames = "aws.dynamodb.table_names"
    /**
    The JSON-serialized value of each item in the `ConsumedCapacity` response field.

    ~~~
    // Examplesattributes[.awsDynamodbConsumedCapacity] = { "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbConsumedCapacity = "aws.dynamodb.consumed_capacity"
    /**
    The JSON-serialized value of the `ItemCollectionMetrics` response field.

    ~~~
    // Examples
    attributes[.awsDynamodbItemCollectionMetrics] = "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbItemCollectionMetrics = "aws.dynamodb.item_collection_metrics"
    /**
    The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbProvisionedReadCapacity] = 1.0attributes[.awsDynamodbProvisionedReadCapacity] = 2.0
    ~~~
    - Requires: Value type should be `double`
    */
    case awsDynamodbProvisionedReadCapacity = "aws.dynamodb.provisioned_read_capacity"
    /**
    The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbProvisionedWriteCapacity] = 1.0attributes[.awsDynamodbProvisionedWriteCapacity] = 2.0
    ~~~
    - Requires: Value type should be `double`
    */
    case awsDynamodbProvisionedWriteCapacity = "aws.dynamodb.provisioned_write_capacity"
    /**
    The value of the `ConsistentRead` request parameter.
    - Requires: Value type should be `Bool`
    */
    case awsDynamodbConsistentRead = "aws.dynamodb.consistent_read"
    /**
    The value of the `ProjectionExpression` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbProjection] = "Title"
    attributes[.awsDynamodbProjection] = "Title, Price, Color"
    attributes[.awsDynamodbProjection] = "Title, Description, RelatedItems, ProductReviews"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbProjection = "aws.dynamodb.projection"
    /**
    The value of the `Limit` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbLimit] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbLimit = "aws.dynamodb.limit"
    /**
    The value of the `AttributesToGet` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbAttributesToGet] = livesattributes[.awsDynamodbAttributesToGet] = id
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbAttributesToGet = "aws.dynamodb.attributes_to_get"
    /**
    The value of the `IndexName` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbIndexName] = "name_to_group"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbIndexName = "aws.dynamodb.index_name"
    /**
    The value of the `Select` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbSelect] = "ALL_ATTRIBUTES"
    attributes[.awsDynamodbSelect] = "COUNT"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbSelect = "aws.dynamodb.select"
    /**
    The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.

    ~~~
    // Examplesattributes[.awsDynamodbGlobalSecondaryIndexes] = { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbGlobalSecondaryIndexes = "aws.dynamodb.global_secondary_indexes"
    /**
    The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.

    ~~~
    // Examplesattributes[.awsDynamodbLocalSecondaryIndexes] = { "IndexArn": "string", "IndexName": "string", "IndexSizeBytes": number, "ItemCount": number, "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbLocalSecondaryIndexes = "aws.dynamodb.local_secondary_indexes"
    /**
    The value of the `ExclusiveStartTableName` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbExclusiveStartTable] = "Users"
    attributes[.awsDynamodbExclusiveStartTable] = "CatsTable"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbExclusiveStartTable = "aws.dynamodb.exclusive_start_table"
    /**
    The the number of items in the `TableNames` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbTableCount] = 20
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbTableCount = "aws.dynamodb.table_count"
    /**
    The value of the `ScanIndexForward` request parameter.
    - Requires: Value type should be `Bool`
    */
    case awsDynamodbScanForward = "aws.dynamodb.scan_forward"
    /**
    The value of the `Segment` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbSegment] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbSegment = "aws.dynamodb.segment"
    /**
    The value of the `TotalSegments` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbTotalSegments] = 100
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbTotalSegments = "aws.dynamodb.total_segments"
    /**
    The value of the `Count` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbCount] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbCount = "aws.dynamodb.count"
    /**
    The value of the `ScannedCount` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbScannedCount] = 50
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbScannedCount = "aws.dynamodb.scanned_count"
    /**
    The JSON-serialized value of each item in the `AttributeDefinitions` request field.

    ~~~
    // Examplesattributes[.awsDynamodbAttributeDefinitions] = { "AttributeName": "string", "AttributeType": "string" }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbAttributeDefinitions = "aws.dynamodb.attribute_definitions"
    /**
    The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.

    ~~~
    // Examplesattributes[.awsDynamodbGlobalSecondaryIndexUpdates] = { "Create": { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbGlobalSecondaryIndexUpdates = "aws.dynamodb.global_secondary_index_updates"
    /**
    The name of the operation being executed.

    ~~~
    // Examples
    attributes[.graphqlOperationName] = "findBookById"
    ~~~
    - Requires: Value type should be `String`
    */
    case graphqlOperationName = "graphql.operation.name"
    /**
    The type of the operation being executed.

    ~~~
    // Examples
    attributes[.graphqlOperationType] = "query"
    attributes[.graphqlOperationType] = "mutation"
    attributes[.graphqlOperationType] = "subscription"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.GraphqlOperationTypeValues`](x-source-tag://otelGraphqlOperationTypeValues) (of type `String`)
    */
    case graphqlOperationType = "graphql.operation.type"
    /**
    The GraphQL document being executed.

    ~~~
    // Examples
    attributes[.graphqlDocument] = "query findBookById { bookById(id: ?) { name } }"
    ~~~

    - Note: The value may be sanitized to exclude sensitive information.
    - Requires: Value type should be `String`
    */
    case graphqlDocument = "graphql.document"
    /**
    The message destination name.

    ~~~
    // Examples
    attributes[.messagingDestinationName] = "MyQueue"
    attributes[.messagingDestinationName] = "MyTopic"
    ~~~

    - Note: Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker does not have such notion, the destination name SHOULD uniquely identify the broker.
    - Requires: Value type should be `String`
    */
    case messagingDestinationName = "messaging.destination.name"
    /**
    The message source name.

    ~~~
    // Examples
    attributes[.messagingSourceName] = "MyQueue"
    attributes[.messagingSourceName] = "MyTopic"
    ~~~

    - Note: Source name SHOULD uniquely identify a specific queue, topic, or other entity within the broker. If
      the broker does not have such notion, the source name SHOULD uniquely identify the broker.
    - Requires: Value type should be `String`
    */
    case messagingSourceName = "messaging.source.name"
    /**
    The kind of message destination.
    - Requires: Value should be one of [`SemanticAttributes.MessagingDestinationKindValues`](x-source-tag://otelMessagingDestinationKindValues) (of type `String`)
    */
    case messagingDestinationKind = "messaging.destination.kind"
    /**
    Low cardinality representation of the messaging destination name.

    ~~~
    // Examples
    attributes[.messagingDestinationTemplate] = "/customers/{customerId}"
    ~~~

    - Note: Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    - Requires: Value type should be `String`
    */
    case messagingDestinationTemplate = "messaging.destination.template"
    /**
    A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.
    - Requires: Value type should be `Bool`
    */
    case messagingDestinationTemporary = "messaging.destination.temporary"
    /**
    A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).
    - Requires: Value type should be `Bool`
    */
    case messagingDestinationAnonymous = "messaging.destination.anonymous"
    /**
    The kind of message source.
    - Requires: Value should be one of [`SemanticAttributes.MessagingSourceKindValues`](x-source-tag://otelMessagingSourceKindValues) (of type `String`)
    */
    case messagingSourceKind = "messaging.source.kind"
    /**
    Low cardinality representation of the messaging source name.

    ~~~
    // Examples
    attributes[.messagingSourceTemplate] = "/customers/{customerId}"
    ~~~

    - Note: Source names could be constructed from templates. An example would be a source name involving a user name or product id. Although the source name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    - Requires: Value type should be `String`
    */
    case messagingSourceTemplate = "messaging.source.template"
    /**
    A boolean that is true if the message source is temporary and might not exist anymore after messages are processed.
    - Requires: Value type should be `Bool`
    */
    case messagingSourceTemporary = "messaging.source.temporary"
    /**
    A boolean that is true if the message source is anonymous (could be unnamed or have auto-generated name).
    - Requires: Value type should be `Bool`
    */
    case messagingSourceAnonymous = "messaging.source.anonymous"
    /**
    The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer.group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer.group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.

    ~~~
    // Examples
    attributes[.messagingConsumerId] = "mygroup - client-6"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingConsumerId = "messaging.consumer.id"
    /**
    RabbitMQ message routing key.

    ~~~
    // Examples
    attributes[.messagingRabbitmqDestinationRoutingKey] = "myKey"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRabbitmqDestinationRoutingKey = "messaging.rabbitmq.destination.routing_key"
    /**
    Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.

    ~~~
    // Examples
    attributes[.messagingKafkaMessageKey] = "myKey"
    ~~~

    - Note: If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.
    - Requires: Value type should be `String`
    */
    case messagingKafkaMessageKey = "messaging.kafka.message.key"
    /**
    Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.

    ~~~
    // Examples
    attributes[.messagingKafkaConsumerGroup] = "my-group"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingKafkaConsumerGroup = "messaging.kafka.consumer.group"
    /**
    Client Id for the Consumer or Producer that is handling the message.

    ~~~
    // Examples
    attributes[.messagingKafkaClientId] = "client-5"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingKafkaClientId = "messaging.kafka.client_id"
    /**
    Partition the message is sent to.

    ~~~
    // Examplesattributes[.messagingKafkaDestinationPartition] = 2
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingKafkaDestinationPartition = "messaging.kafka.destination.partition"
    /**
    Partition the message is received from.

    ~~~
    // Examplesattributes[.messagingKafkaSourcePartition] = 2
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingKafkaSourcePartition = "messaging.kafka.source.partition"
    /**
    The offset of a record in the corresponding Kafka partition.

    ~~~
    // Examplesattributes[.messagingKafkaMessageOffset] = 42
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingKafkaMessageOffset = "messaging.kafka.message.offset"
    /**
    A boolean that is true if the message is a tombstone.
    - Requires: Value type should be `Bool`
    */
    case messagingKafkaMessageTombstone = "messaging.kafka.message.tombstone"
    /**
    Namespace of RocketMQ resources, resources in different namespaces are individual.

    ~~~
    // Examples
    attributes[.messagingRocketmqNamespace] = "myNamespace"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqNamespace = "messaging.rocketmq.namespace"
    /**
    Name of the RocketMQ producer/consumer group that is handling the message. The client type is identified by the SpanKind.

    ~~~
    // Examples
    attributes[.messagingRocketmqClientGroup] = "myConsumerGroup"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqClientGroup = "messaging.rocketmq.client_group"
    /**
    The unique identifier for each client.

    ~~~
    // Examples
    attributes[.messagingRocketmqClientId] = "myhost@8742@s8083jm"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqClientId = "messaging.rocketmq.client_id"
    /**
    The timestamp in milliseconds that the delay message is expected to be delivered to consumer.

    ~~~
    // Examplesattributes[.messagingRocketmqMessageDeliveryTimestamp] = 1665987217045
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingRocketmqMessageDeliveryTimestamp = "messaging.rocketmq.message.delivery_timestamp"
    /**
    The delay time level for delay message, which determines the message delay time.

    ~~~
    // Examplesattributes[.messagingRocketmqMessageDelayTimeLevel] = 3
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingRocketmqMessageDelayTimeLevel = "messaging.rocketmq.message.delay_time_level"
    /**
    It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.

    ~~~
    // Examples
    attributes[.messagingRocketmqMessageGroup] = "myMessageGroup"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqMessageGroup = "messaging.rocketmq.message.group"
    /**
    Type of message.
    - Requires: Value should be one of [`SemanticAttributes.MessagingRocketmqMessageTypeValues`](x-source-tag://otelMessagingRocketmqMessageTypeValues) (of type `String`)
    */
    case messagingRocketmqMessageType = "messaging.rocketmq.message.type"
    /**
    The secondary classifier of message besides topic.

    ~~~
    // Examples
    attributes[.messagingRocketmqMessageTag] = "tagA"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqMessageTag = "messaging.rocketmq.message.tag"
    /**
    Key(s) of message, another way to mark message besides message id.

    ~~~
    // Examplesattributes[.messagingRocketmqMessageKeys] = keyAattributes[.messagingRocketmqMessageKeys] = keyB
    ~~~
    - Requires: Value type should be `[String]`
    */
    case messagingRocketmqMessageKeys = "messaging.rocketmq.message.keys"
    /**
    Model of message consumption. This only applies to consumer spans.
    - Requires: Value should be one of [`SemanticAttributes.MessagingRocketmqConsumptionModelValues`](x-source-tag://otelMessagingRocketmqConsumptionModelValues) (of type `String`)
    */
    case messagingRocketmqConsumptionModel = "messaging.rocketmq.consumption_model"
    /**
    The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    - Requires: Value should be one of [`SemanticAttributes.RpcGrpcStatusCodeValues`](x-source-tag://otelRpcGrpcStatusCodeValues) (of type `Int`)
    */
    case rpcGrpcStatusCode = "rpc.grpc.status_code"
    /**
    Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.

    ~~~
    // Examples
    attributes[.rpcJsonrpcVersion] = "2.0"
    attributes[.rpcJsonrpcVersion] = "1.0"
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcVersion = "rpc.jsonrpc.version"
    /**
    `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.

    ~~~
    // Examples
    attributes[.rpcJsonrpcRequestId] = "10"
    attributes[.rpcJsonrpcRequestId] = "request-7"
    attributes[.rpcJsonrpcRequestId] = ""
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcRequestId = "rpc.jsonrpc.request_id"
    /**
    `error.code` property of response if it is an error response.

    ~~~
    // Examplesattributes[.rpcJsonrpcErrorCode] = -32700attributes[.rpcJsonrpcErrorCode] = 100
    ~~~
    - Requires: Value type should be `Int`
    */
    case rpcJsonrpcErrorCode = "rpc.jsonrpc.error_code"
    /**
    `error.message` property of response if it is an error response.

    ~~~
    // Examples
    attributes[.rpcJsonrpcErrorMessage] = "Parse error"
    attributes[.rpcJsonrpcErrorMessage] = "User already exists"
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcErrorMessage = "rpc.jsonrpc.error_message"
    /**
    Whether this is a received or sent message.
    - Requires: Value should be one of [`SemanticAttributes.MessageTypeValues`](x-source-tag://otelMessageTypeValues) (of type `String`)
    */
    case messageType = "message.type"
    /**
    MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.

    - Note: This way we guarantee that the values will be consistent between different implementations.
    - Requires: Value type should be `Int`
    */
    case messageId = "message.id"
    /**
    Compressed size of the message in bytes.
    - Requires: Value type should be `Int`
    */
    case messageCompressedSize = "message.compressed_size"
    /**
    Uncompressed size of the message in bytes.
    - Requires: Value type should be `Int`
    */
    case messageUncompressedSize = "message.uncompressed_size"
    /**
    The [error codes](https://connect.build/docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
    - Requires: Value should be one of [`SemanticAttributes.RpcConnectRpcErrorCodeValues`](x-source-tag://otelRpcConnectRpcErrorCodeValues) (of type `String`)
    */
    case rpcConnectRpcErrorCode = "rpc.connect_rpc.error_code"
    /**
    SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.

    - Note: An exception is considered to have escaped (or left) the scope of a span,
      if that span is ended while the exception is still logically "in flight".
      This may be actually "in flight" in some languages (e.g. if the exception
      is passed to a Context manager's `__exit__` method in Python) but will
      usually be caught at the point of recording the exception in most languages.

      It is usually not possible to determine at the point where an exception is thrown
      whether it will escape the scope of a span.
      However, it is trivial to know that an exception
      will escape, if one checks for an active exception just before ending the span,
      as done in the [example above](#recording-an-exception).

      It follows that an exception may still escape the scope of the span
      even if the `exception.escaped` attribute was not set or set to false,
      since the event might have been recorded at a time where it was not
      clear whether the exception will escape.
    - Requires: Value type should be `Bool`
    */
    case exceptionEscaped = "exception.escaped"

    // MARK: - Manual Definitions
    // Some definitions have not yet been added to the YAML which generates this script.
    // As such as we have some manually defined cases.

    /**
    An exception event **MUST** be called "exception" as per the [specification](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/exceptions.md).
    */
    case exception = "exception";
    
    /**
    Kind of HTTP protocol used.
    */
    /// - Tag: otelHttpFlavorValues
    public struct HttpFlavorValues: CustomStringConvertible {
        /**
        HTTP/1.0.
        */
        public static let http10 = HttpFlavorValues("1.0")
        /**
        HTTP/1.1.
        */
        public static let http11 = HttpFlavorValues("1.1")
        /**
        HTTP/2.
        */
        public static let http20 = HttpFlavorValues("2.0")
        /**
        HTTP/3.
        */
        public static let http30 = HttpFlavorValues("3.0")
        /**
        SPDY protocol.
        */
        public static let spdy = HttpFlavorValues("SPDY")
        /**
        QUIC protocol.
        */
        public static let quic = HttpFlavorValues("QUIC")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    The domain identifies the business context for the events.
    */
    /// - Tag: otelEventDomainValues
    public struct EventDomainValues: CustomStringConvertible {
        /**
        Events from browser apps.
        */
        public static let browser = EventDomainValues("browser")
        /**
        Events from mobile apps.
        */
        public static let device = EventDomainValues("device")
        /**
        Events from Kubernetes.
        */
        public static let k8s = EventDomainValues("k8s")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    Parent-child Reference type.
    */
    /// - Tag: otelOpentracingRefTypeValues
    public enum OpentracingRefTypeValues: String {
        /**
        The parent Span depends on the child Span in some capacity.
        */
        case child_of = "child_of"
        /**
        The parent Span does not depend in any way on the result of the child Span.
        */
        case follows_from = "follows_from"
    }
    
    /**
    An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
    */
    /// - Tag: otelDbSystemValues
    public struct DbSystemValues: CustomStringConvertible {
        /**
        Some other SQL database. Fallback only. See notes.
        */
        public static let otherSql = DbSystemValues("other_sql")
        /**
        Microsoft SQL Server.
        */
        public static let mssql = DbSystemValues("mssql")
        /**
        Microsoft SQL Server Compact.
        */
        public static let mssqlcompact = DbSystemValues("mssqlcompact")
        /**
        MySQL.
        */
        public static let mysql = DbSystemValues("mysql")
        /**
        Oracle Database.
        */
        public static let oracle = DbSystemValues("oracle")
        /**
        IBM Db2.
        */
        public static let db2 = DbSystemValues("db2")
        /**
        PostgreSQL.
        */
        public static let postgresql = DbSystemValues("postgresql")
        /**
        Amazon Redshift.
        */
        public static let redshift = DbSystemValues("redshift")
        /**
        Apache Hive.
        */
        public static let hive = DbSystemValues("hive")
        /**
        Cloudscape.
        */
        public static let cloudscape = DbSystemValues("cloudscape")
        /**
        HyperSQL DataBase.
        */
        public static let hsqldb = DbSystemValues("hsqldb")
        /**
        Progress Database.
        */
        public static let progress = DbSystemValues("progress")
        /**
        SAP MaxDB.
        */
        public static let maxdb = DbSystemValues("maxdb")
        /**
        SAP HANA.
        */
        public static let hanadb = DbSystemValues("hanadb")
        /**
        Ingres.
        */
        public static let ingres = DbSystemValues("ingres")
        /**
        FirstSQL.
        */
        public static let firstsql = DbSystemValues("firstsql")
        /**
        EnterpriseDB.
        */
        public static let edb = DbSystemValues("edb")
        /**
        InterSystems Caché.
        */
        public static let cache = DbSystemValues("cache")
        /**
        Adabas (Adaptable Database System).
        */
        public static let adabas = DbSystemValues("adabas")
        /**
        Firebird.
        */
        public static let firebird = DbSystemValues("firebird")
        /**
        Apache Derby.
        */
        public static let derby = DbSystemValues("derby")
        /**
        FileMaker.
        */
        public static let filemaker = DbSystemValues("filemaker")
        /**
        Informix.
        */
        public static let informix = DbSystemValues("informix")
        /**
        InstantDB.
        */
        public static let instantdb = DbSystemValues("instantdb")
        /**
        InterBase.
        */
        public static let interbase = DbSystemValues("interbase")
        /**
        MariaDB.
        */
        public static let mariadb = DbSystemValues("mariadb")
        /**
        Netezza.
        */
        public static let netezza = DbSystemValues("netezza")
        /**
        Pervasive PSQL.
        */
        public static let pervasive = DbSystemValues("pervasive")
        /**
        PointBase.
        */
        public static let pointbase = DbSystemValues("pointbase")
        /**
        SQLite.
        */
        public static let sqlite = DbSystemValues("sqlite")
        /**
        Sybase.
        */
        public static let sybase = DbSystemValues("sybase")
        /**
        Teradata.
        */
        public static let teradata = DbSystemValues("teradata")
        /**
        Vertica.
        */
        public static let vertica = DbSystemValues("vertica")
        /**
        H2.
        */
        public static let h2 = DbSystemValues("h2")
        /**
        ColdFusion IMQ.
        */
        public static let coldfusion = DbSystemValues("coldfusion")
        /**
        Apache Cassandra.
        */
        public static let cassandra = DbSystemValues("cassandra")
        /**
        Apache HBase.
        */
        public static let hbase = DbSystemValues("hbase")
        /**
        MongoDB.
        */
        public static let mongodb = DbSystemValues("mongodb")
        /**
        Redis.
        */
        public static let redis = DbSystemValues("redis")
        /**
        Couchbase.
        */
        public static let couchbase = DbSystemValues("couchbase")
        /**
        CouchDB.
        */
        public static let couchdb = DbSystemValues("couchdb")
        /**
        Microsoft Azure Cosmos DB.
        */
        public static let cosmosdb = DbSystemValues("cosmosdb")
        /**
        Amazon DynamoDB.
        */
        public static let dynamodb = DbSystemValues("dynamodb")
        /**
        Neo4j.
        */
        public static let neo4j = DbSystemValues("neo4j")
        /**
        Apache Geode.
        */
        public static let geode = DbSystemValues("geode")
        /**
        Elasticsearch.
        */
        public static let elasticsearch = DbSystemValues("elasticsearch")
        /**
        Memcached.
        */
        public static let memcached = DbSystemValues("memcached")
        /**
        CockroachDB.
        */
        public static let cockroachdb = DbSystemValues("cockroachdb")
        /**
        OpenSearch.
        */
        public static let opensearch = DbSystemValues("opensearch")
        /**
        ClickHouse.
        */
        public static let clickhouse = DbSystemValues("clickhouse")
        /**
        Cloud Spanner.
        */
        public static let spanner = DbSystemValues("spanner")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    Protocol [address family](https://man7.org/linux/man-pages/man7/address_families.7.html) which is used for communication.
    */
    /// - Tag: otelNetSockFamilyValues
    public struct NetSockFamilyValues: CustomStringConvertible {
        /**
        IPv4 address.
        */
        public static let inet = NetSockFamilyValues("inet")
        /**
        IPv6 address.
        */
        public static let inet6 = NetSockFamilyValues("inet6")
        /**
        Unix domain socket path.
        */
        public static let unix = NetSockFamilyValues("unix")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    Transport protocol used. See note below.
    */
    /// - Tag: otelNetTransportValues
    public struct NetTransportValues: CustomStringConvertible {
        /**
        ip_tcp.
        */
        public static let ipTcp = NetTransportValues("ip_tcp")
        /**
        ip_udp.
        */
        public static let ipUdp = NetTransportValues("ip_udp")
        /**
        Named or anonymous pipe. See note below.
        */
        public static let pipe = NetTransportValues("pipe")
        /**
        In-process communication.
        */
        public static let inproc = NetTransportValues("inproc")
        /**
        Something else (non IP-based).
        */
        public static let other = NetTransportValues("other")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
    */
    /// - Tag: otelDbCassandraConsistencyLevelValues
    public enum DbCassandraConsistencyLevelValues: String {
        /**
        all.
        */
        case all = "all"
        /**
        each_quorum.
        */
        case each_quorum = "each_quorum"
        /**
        quorum.
        */
        case quorum = "quorum"
        /**
        local_quorum.
        */
        case local_quorum = "local_quorum"
        /**
        one.
        */
        case one = "one"
        /**
        two.
        */
        case two = "two"
        /**
        three.
        */
        case three = "three"
        /**
        local_one.
        */
        case local_one = "local_one"
        /**
        any.
        */
        case any = "any"
        /**
        serial.
        */
        case serial = "serial"
        /**
        local_serial.
        */
        case local_serial = "local_serial"
    }
    
    /**
    Name of the code, either "OK" or "ERROR". MUST NOT be set if the status code is UNSET.
    */
    /// - Tag: otelOtelStatusCodeValues
    public enum OtelStatusCodeValues: String {
        /**
        The operation has been validated by an Application developer or Operator to have completed successfully.
        */
        case ok = "OK"
        /**
        The operation contains an error.
        */
        case error = "ERROR"
    }
    
    /**
    Type of the trigger which caused this function invocation.
    */
    /// - Tag: otelFaasTriggerValues
    public enum FaasTriggerValues: String {
        /**
        A response to some data source operation such as a database or filesystem read/write.
        */
        case datasource = "datasource"
        /**
        To provide an answer to an inbound HTTP request.
        */
        case http = "http"
        /**
        A function is set to be executed when messages are sent to a messaging system.
        */
        case pubsub = "pubsub"
        /**
        A function is scheduled to be executed regularly.
        */
        case timer = "timer"
        /**
        If none of the others apply.
        */
        case other = "other"
    }
    
    /**
    Describes the type of the operation that was performed on the data.
    */
    /// - Tag: otelFaasDocumentOperationValues
    public struct FaasDocumentOperationValues: CustomStringConvertible {
        /**
        When a new object is created.
        */
        public static let insert = FaasDocumentOperationValues("insert")
        /**
        When an object is modified.
        */
        public static let edit = FaasDocumentOperationValues("edit")
        /**
        When an object is deleted.
        */
        public static let delete = FaasDocumentOperationValues("delete")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    A string identifying the kind of messaging operation as defined in the [Operation names](#operation-names) section above.
    */
    /// - Tag: otelMessagingOperationValues
    public struct MessagingOperationValues: CustomStringConvertible {
        /**
        publish.
        */
        public static let publish = MessagingOperationValues("publish")
        /**
        receive.
        */
        public static let receive = MessagingOperationValues("receive")
        /**
        process.
        */
        public static let process = MessagingOperationValues("process")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    The internet connection type currently being used by the host.
    */
    /// - Tag: otelNetHostConnectionTypeValues
    public struct NetHostConnectionTypeValues: CustomStringConvertible {
        /**
        wifi.
        */
        public static let wifi = NetHostConnectionTypeValues("wifi")
        /**
        wired.
        */
        public static let wired = NetHostConnectionTypeValues("wired")
        /**
        cell.
        */
        public static let cell = NetHostConnectionTypeValues("cell")
        /**
        unavailable.
        */
        public static let unavailable = NetHostConnectionTypeValues("unavailable")
        /**
        unknown.
        */
        public static let unknown = NetHostConnectionTypeValues("unknown")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
    */
    /// - Tag: otelNetHostConnectionSubtypeValues
    public struct NetHostConnectionSubtypeValues: CustomStringConvertible {
        /**
        GPRS.
        */
        public static let gprs = NetHostConnectionSubtypeValues("gprs")
        /**
        EDGE.
        */
        public static let edge = NetHostConnectionSubtypeValues("edge")
        /**
        UMTS.
        */
        public static let umts = NetHostConnectionSubtypeValues("umts")
        /**
        CDMA.
        */
        public static let cdma = NetHostConnectionSubtypeValues("cdma")
        /**
        EVDO Rel. 0.
        */
        public static let evdo0 = NetHostConnectionSubtypeValues("evdo_0")
        /**
        EVDO Rev. A.
        */
        public static let evdoA = NetHostConnectionSubtypeValues("evdo_a")
        /**
        CDMA2000 1XRTT.
        */
        public static let cdma20001xrtt = NetHostConnectionSubtypeValues("cdma2000_1xrtt")
        /**
        HSDPA.
        */
        public static let hsdpa = NetHostConnectionSubtypeValues("hsdpa")
        /**
        HSUPA.
        */
        public static let hsupa = NetHostConnectionSubtypeValues("hsupa")
        /**
        HSPA.
        */
        public static let hspa = NetHostConnectionSubtypeValues("hspa")
        /**
        IDEN.
        */
        public static let iden = NetHostConnectionSubtypeValues("iden")
        /**
        EVDO Rev. B.
        */
        public static let evdoB = NetHostConnectionSubtypeValues("evdo_b")
        /**
        LTE.
        */
        public static let lte = NetHostConnectionSubtypeValues("lte")
        /**
        EHRPD.
        */
        public static let ehrpd = NetHostConnectionSubtypeValues("ehrpd")
        /**
        HSPAP.
        */
        public static let hspap = NetHostConnectionSubtypeValues("hspap")
        /**
        GSM.
        */
        public static let gsm = NetHostConnectionSubtypeValues("gsm")
        /**
        TD-SCDMA.
        */
        public static let tdScdma = NetHostConnectionSubtypeValues("td_scdma")
        /**
        IWLAN.
        */
        public static let iwlan = NetHostConnectionSubtypeValues("iwlan")
        /**
        5G NR (New Radio).
        */
        public static let nr = NetHostConnectionSubtypeValues("nr")
        /**
        5G NRNSA (New Radio Non-Standalone).
        */
        public static let nrnsa = NetHostConnectionSubtypeValues("nrnsa")
        /**
        LTE CA.
        */
        public static let lteCa = NetHostConnectionSubtypeValues("lte_ca")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    The cloud provider of the invoked function.
    */
    /// - Tag: otelFaasInvokedProviderValues
    public struct FaasInvokedProviderValues: CustomStringConvertible {
        /**
        Alibaba Cloud.
        */
        public static let alibabaCloud = FaasInvokedProviderValues("alibaba_cloud")
        /**
        Amazon Web Services.
        */
        public static let aws = FaasInvokedProviderValues("aws")
        /**
        Microsoft Azure.
        */
        public static let azure = FaasInvokedProviderValues("azure")
        /**
        Google Cloud Platform.
        */
        public static let gcp = FaasInvokedProviderValues("gcp")
        /**
        Tencent Cloud.
        */
        public static let tencentCloud = FaasInvokedProviderValues("tencent_cloud")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    The value `aws-api`.
    */
    /// - Tag: otelRpcSystemValues
    public struct RpcSystemValues: CustomStringConvertible {
        /**
        gRPC.
        */
        public static let grpc = RpcSystemValues("grpc")
        /**
        Java RMI.
        */
        public static let javaRmi = RpcSystemValues("java_rmi")
        /**
        .NET WCF.
        */
        public static let dotnetWcf = RpcSystemValues("dotnet_wcf")
        /**
        Apache Dubbo.
        */
        public static let apacheDubbo = RpcSystemValues("apache_dubbo")
        /**
        Connect RPC.
        */
        public static let connectRpc = RpcSystemValues("connect_rpc")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    The type of the operation being executed.
    */
    /// - Tag: otelGraphqlOperationTypeValues
    public enum GraphqlOperationTypeValues: String {
        /**
        GraphQL query.
        */
        case query = "query"
        /**
        GraphQL mutation.
        */
        case mutation = "mutation"
        /**
        GraphQL subscription.
        */
        case subscription = "subscription"
    }
    
    /**
    The kind of message destination.
    */
    /// - Tag: otelMessagingDestinationKindValues
    public enum MessagingDestinationKindValues: String {
        /**
        A message sent to a queue.
        */
        case queue = "queue"
        /**
        A message sent to a topic.
        */
        case topic = "topic"
    }
    
    /**
    The kind of message source.
    */
    /// - Tag: otelMessagingSourceKindValues
    public struct MessagingSourceKindValues: CustomStringConvertible {
        /**
        A message received from a queue.
        */
        public static let queue = MessagingSourceKindValues("queue")
        /**
        A message received from a topic.
        */
        public static let topic = MessagingSourceKindValues("topic")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }
    
    /**
    Type of message.
    */
    /// - Tag: otelMessagingRocketmqMessageTypeValues
    public enum MessagingRocketmqMessageTypeValues: String {
        /**
        Normal message.
        */
        case normal = "normal"
        /**
        FIFO message.
        */
        case fifo = "fifo"
        /**
        Delay message.
        */
        case delay = "delay"
        /**
        Transaction message.
        */
        case transaction = "transaction"
    }
    
    /**
    Model of message consumption. This only applies to consumer spans.
    */
    /// - Tag: otelMessagingRocketmqConsumptionModelValues
    public enum MessagingRocketmqConsumptionModelValues: String {
        /**
        Clustering consumption model.
        */
        case clustering = "clustering"
        /**
        Broadcasting consumption model.
        */
        case broadcasting = "broadcasting"
    }
    
    /**
    The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    */
    /// - Tag: otelRpcGrpcStatusCodeValues
    public enum RpcGrpcStatusCodeValues: Int {
        /**
        OK.
        */
        case ok = 0
        /**
        CANCELLED.
        */
        case cancelled = 1
        /**
        UNKNOWN.
        */
        case unknown = 2
        /**
        INVALID_ARGUMENT.
        */
        case invalid_argument = 3
        /**
        DEADLINE_EXCEEDED.
        */
        case deadline_exceeded = 4
        /**
        NOT_FOUND.
        */
        case not_found = 5
        /**
        ALREADY_EXISTS.
        */
        case already_exists = 6
        /**
        PERMISSION_DENIED.
        */
        case permission_denied = 7
        /**
        RESOURCE_EXHAUSTED.
        */
        case resource_exhausted = 8
        /**
        FAILED_PRECONDITION.
        */
        case failed_precondition = 9
        /**
        ABORTED.
        */
        case aborted = 10
        /**
        OUT_OF_RANGE.
        */
        case out_of_range = 11
        /**
        UNIMPLEMENTED.
        */
        case unimplemented = 12
        /**
        INTERNAL.
        */
        case `internal` = 13
        /**
        UNAVAILABLE.
        */
        case unavailable = 14
        /**
        DATA_LOSS.
        */
        case data_loss = 15
        /**
        UNAUTHENTICATED.
        */
        case unauthenticated = 16
    }
    
    /**
    Whether this is a received or sent message.
    */
    /// - Tag: otelMessageTypeValues
    public enum MessageTypeValues: String {
        /**
        sent.
        */
        case sent = "SENT"
        /**
        received.
        */
        case received = "RECEIVED"
    }
    
    /**
    The [error codes](https://connect.build/docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
    */
    /// - Tag: otelRpcConnectRpcErrorCodeValues
    public enum RpcConnectRpcErrorCodeValues: String {
        /**
        cancelled.
        */
        case cancelled = "cancelled"
        /**
        unknown.
        */
        case unknown = "unknown"
        /**
        invalid_argument.
        */
        case invalid_argument = "invalid_argument"
        /**
        deadline_exceeded.
        */
        case deadline_exceeded = "deadline_exceeded"
        /**
        not_found.
        */
        case not_found = "not_found"
        /**
        already_exists.
        */
        case already_exists = "already_exists"
        /**
        permission_denied.
        */
        case permission_denied = "permission_denied"
        /**
        resource_exhausted.
        */
        case resource_exhausted = "resource_exhausted"
        /**
        failed_precondition.
        */
        case failed_precondition = "failed_precondition"
        /**
        aborted.
        */
        case aborted = "aborted"
        /**
        out_of_range.
        */
        case out_of_range = "out_of_range"
        /**
        unimplemented.
        */
        case unimplemented = "unimplemented"
        /**
        internal.
        */
        case `internal` = "internal"
        /**
        unavailable.
        */
        case unavailable = "unavailable"
        /**
        data_loss.
        */
        case data_loss = "data_loss"
        /**
        unauthenticated.
        */
        case unauthenticated = "unauthenticated"
    }
    
}