/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */
// DO **NOT** EDIT. This file is automatically generated.

import Foundation

public enum SemanticAttributes: String {
    /**
    Client address - unix domain socket name, IPv4 or IPv6 address.

    ~~~
    // Examples
    attributes[.clientAddress] = "/tmp/my.sock"
    attributes[.clientAddress] = "10.1.2.80"
    ~~~

    - Note: When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent client address behind any intermediaries (e.g. proxies) if it's available.
    - Requires: Value type should be `String`
    */
    case clientAddress = "client.address"
    /**
    Client port number.

    ~~~
    // Examplesattributes[.clientPort] = 65123
    ~~~

    - Note: When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent client port behind any intermediaries (e.g. proxies) if it's available.
    - Requires: Value type should be `Int`
    */
    case clientPort = "client.port"
    /**
    Immediate client peer address - unix domain socket name, IPv4 or IPv6 address.

    ~~~
    // Examples
    attributes[.clientSocketAddress] = "/tmp/my.sock"
    attributes[.clientSocketAddress] = "127.0.0.1"
    ~~~
    - Requires: Value type should be `String`
    */
    case clientSocketAddress = "client.socket.address"
    /**
    Immediate client peer port number.

    ~~~
    // Examplesattributes[.clientSocketPort] = 35555
    ~~~
    - Requires: Value type should be `Int`
    */
    case clientSocketPort = "client.socket.port"
    /**
    Deprecated, use `http.request.method` instead.

    ~~~
    // Examples
    attributes[.httpMethod] = "GET"
    attributes[.httpMethod] = "POST"
    attributes[.httpMethod] = "HEAD"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpMethod = "http.method"
    /**
    Deprecated, use `http.response.status_code` instead.

    ~~~
    // Examplesattributes[.httpStatusCode] = 200
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpStatusCode = "http.status_code"
    /**
    Deprecated, use `url.scheme` instead.

    ~~~
    // Examples
    attributes[.httpScheme] = "http"
    attributes[.httpScheme] = "https"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpScheme = "http.scheme"
    /**
    Deprecated, use `url.full` instead.

    ~~~
    // Examples
    attributes[.httpUrl] = "https://www.foo.bar/search?q=OpenTelemetry#SemConv"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpUrl = "http.url"
    /**
    Deprecated, use `url.path` and `url.query` instead.

    ~~~
    // Examples
    attributes[.httpTarget] = "/search?q=OpenTelemetry#SemConv"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpTarget = "http.target"
    /**
    Deprecated, use `http.request.body.size` instead.

    ~~~
    // Examplesattributes[.httpRequestContentLength] = 3495
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpRequestContentLength = "http.request_content_length"
    /**
    Deprecated, use `http.response.body.size` instead.

    ~~~
    // Examplesattributes[.httpResponseContentLength] = 3495
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpResponseContentLength = "http.response_content_length"
    /**
    Deprecated, use `server.socket.domain` on client spans.

    ~~~
    // Examples
    attributes[.netSockPeerName] = "/var/my.sock"
    ~~~
    - Requires: Value type should be `String`
    */
    case netSockPeerName = "net.sock.peer.name"
    /**
    Deprecated, use `server.socket.address` on client spans and `client.socket.address` on server spans.

    ~~~
    // Examples
    attributes[.netSockPeerAddr] = "192.168.0.1"
    ~~~
    - Requires: Value type should be `String`
    */
    case netSockPeerAddr = "net.sock.peer.addr"
    /**
    Deprecated, use `server.socket.port` on client spans and `client.socket.port` on server spans.

    ~~~
    // Examplesattributes[.netSockPeerPort] = 65531
    ~~~
    - Requires: Value type should be `Int`
    */
    case netSockPeerPort = "net.sock.peer.port"
    /**
    Deprecated, use `server.address` on client spans and `client.address` on server spans.

    ~~~
    // Examples
    attributes[.netPeerName] = "example.com"
    ~~~
    - Requires: Value type should be `String`
    */
    case netPeerName = "net.peer.name"
    /**
    Deprecated, use `server.port` on client spans and `client.port` on server spans.

    ~~~
    // Examplesattributes[.netPeerPort] = 8080
    ~~~
    - Requires: Value type should be `Int`
    */
    case netPeerPort = "net.peer.port"
    /**
    Deprecated, use `server.address`.

    ~~~
    // Examples
    attributes[.netHostName] = "example.com"
    ~~~
    - Requires: Value type should be `String`
    */
    case netHostName = "net.host.name"
    /**
    Deprecated, use `server.port`.

    ~~~
    // Examplesattributes[.netHostPort] = 8080
    ~~~
    - Requires: Value type should be `Int`
    */
    case netHostPort = "net.host.port"
    /**
    Deprecated, use `server.socket.address`.

    ~~~
    // Examples
    attributes[.netSockHostAddr] = "/var/my.sock"
    ~~~
    - Requires: Value type should be `String`
    */
    case netSockHostAddr = "net.sock.host.addr"
    /**
    Deprecated, use `server.socket.port`.

    ~~~
    // Examplesattributes[.netSockHostPort] = 8080
    ~~~
    - Requires: Value type should be `Int`
    */
    case netSockHostPort = "net.sock.host.port"
    /**
    Deprecated, use `network.transport`.
    - Requires: Value should be one of [`SemanticAttributes.NetTransportValues`](x-source-tag://otelNetTransportValues) (of type `String`)
    */
    case netTransport = "net.transport"
    /**
    Deprecated, use `network.protocol.name`.

    ~~~
    // Examples
    attributes[.netProtocolName] = "amqp"
    attributes[.netProtocolName] = "http"
    attributes[.netProtocolName] = "mqtt"
    ~~~
    - Requires: Value type should be `String`
    */
    case netProtocolName = "net.protocol.name"
    /**
    Deprecated, use `network.protocol.version`.

    ~~~
    // Examples
    attributes[.netProtocolVersion] = "3.1.1"
    ~~~
    - Requires: Value type should be `String`
    */
    case netProtocolVersion = "net.protocol.version"
    /**
    Deprecated, use `network.transport` and `network.type`.
    - Requires: Value should be one of [`SemanticAttributes.NetSockFamilyValues`](x-source-tag://otelNetSockFamilyValues) (of type `String`)
    */
    case netSockFamily = "net.sock.family"
    /**
    The domain name of the destination system.

    ~~~
    // Examples
    attributes[.destinationDomain] = "foo.example.com"
    ~~~

    - Note: This value may be a host name, a fully qualified domain name, or another host naming format.
    - Requires: Value type should be `String`
    */
    case destinationDomain = "destination.domain"
    /**
    Peer address, for example IP address or UNIX socket name.

    ~~~
    // Examples
    attributes[.destinationAddress] = "10.5.3.2"
    ~~~
    - Requires: Value type should be `String`
    */
    case destinationAddress = "destination.address"
    /**
    Peer port number.

    ~~~
    // Examplesattributes[.destinationPort] = 3389attributes[.destinationPort] = 2888
    ~~~
    - Requires: Value type should be `Int`
    */
    case destinationPort = "destination.port"
    /**
    The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.

    ~~~
    // Examples
    attributes[.exceptionType] = "java.net.ConnectException"
    attributes[.exceptionType] = "OSError"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionType = "exception.type"
    /**
    The exception message.

    ~~~
    // Examples
    attributes[.exceptionMessage] = "Division by zero"
    attributes[.exceptionMessage] = "Can't convert 'int' object to str implicitly"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionMessage = "exception.message"
    /**
    A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.

    ~~~
    // Examples
    attributes[.exceptionStacktrace] = "Exception in thread \"main\" java.lang.RuntimeException: Test exception\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)"
    ~~~
    - Requires: Value type should be `String`
    */
    case exceptionStacktrace = "exception.stacktrace"
    /**
    HTTP request method.

    ~~~
    // Examples
    attributes[.httpRequestMethod] = "GET"
    attributes[.httpRequestMethod] = "POST"
    attributes[.httpRequestMethod] = "HEAD"
    ~~~

    - Note: HTTP request method value SHOULD be "known" to the instrumentation.
      By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)
      and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).

      If the HTTP request method is not known to instrumentation, it MUST set the `http.request.method` attribute to `_OTHER` and, except if reporting a metric, MUST
      set the exact method received in the request line as value of the `http.request.method_original` attribute.

      If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it MUST provide a way to override
      the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
      OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
      (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).

      HTTP method names are case-sensitive and `http.request.method` attribute value MUST match a known HTTP method name exactly.
      Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
      Tracing instrumentations that do so, MUST also set `http.request.method_original` to the original value.
    - Requires: Value should be one of [`SemanticAttributes.HttpRequestMethodValues`](x-source-tag://otelHttpRequestMethodValues) (of type `String`)
    */
    case httpRequestMethod = "http.request.method"
    /**
    [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).

    ~~~
    // Examplesattributes[.httpResponseStatusCode] = 200
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpResponseStatusCode = "http.response.status_code"
    /**
    [OSI Application Layer](https://osi-model.com/application-layer/) or non-OSI equivalent. The value SHOULD be normalized to lowercase.

    ~~~
    // Examples
    attributes[.networkProtocolName] = "http"
    attributes[.networkProtocolName] = "spdy"
    ~~~
    - Requires: Value type should be `String`
    */
    case networkProtocolName = "network.protocol.name"
    /**
    Version of the application layer protocol used. See note below.

    ~~~
    // Examples
    attributes[.networkProtocolVersion] = "1.0"
    attributes[.networkProtocolVersion] = "1.1"
    attributes[.networkProtocolVersion] = "2.0"
    ~~~

    - Note: `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client's version. If the HTTP client used has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.
    - Requires: Value type should be `String`
    */
    case networkProtocolVersion = "network.protocol.version"
    /**
    Host identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.

    ~~~
    // Examples
    attributes[.serverAddress] = "example.com"
    ~~~

    - Note: Determined by using the first of the following that applies

      - Host identifier of the [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource)
        if it's sent in absolute-form
      - Host identifier of the `Host` header

      SHOULD NOT be set if capturing it would require an extra DNS lookup.
    - Requires: Value type should be `String`
    */
    case serverAddress = "server.address"
    /**
    Port identifier of the ["URI origin"](https://www.rfc-editor.org/rfc/rfc9110.html#name-uri-origin) HTTP request is sent to.

    ~~~
    // Examplesattributes[.serverPort] = 80attributes[.serverPort] = 8080attributes[.serverPort] = 443
    ~~~

    - Note: When [request target](https://www.rfc-editor.org/rfc/rfc9110.html#target.resource) is absolute URI, `server.port` MUST match URI port identifier, otherwise it MUST match `Host` header port identifier.
    - Requires: Value type should be `Int`
    */
    case serverPort = "server.port"
    /**
    The matched route (path template in the format used by the respective server framework). See note below.

    ~~~
    // Examples
    attributes[.httpRoute] = "/users/:userID?"
    attributes[.httpRoute] = "{controller}/{action}/{id?}"
    ~~~

    - Note: MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
      SHOULD include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
    - Requires: Value type should be `String`
    */
    case httpRoute = "http.route"
    /**
    The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.

    ~~~
    // Examples
    attributes[.urlScheme] = "http"
    attributes[.urlScheme] = "https"
    ~~~
    - Requires: Value type should be `String`
    */
    case urlScheme = "url.scheme"
    /**
    The name identifies the event.

    ~~~
    // Examples
    attributes[.eventName] = "click"
    attributes[.eventName] = "exception"
    ~~~
    - Requires: Value type should be `String`
    */
    case eventName = "event.name"
    /**
    The domain identifies the business context for the events.

    - Note: Events across different domains may have same `event.name`, yet be
      unrelated events.
    - Requires: Value should be one of [`SemanticAttributes.EventDomainValues`](x-source-tag://otelEventDomainValues) (of type `String`)
    */
    case eventDomain = "event.domain"
    /**
    A unique identifier for the Log Record.

    ~~~
    // Examples
    attributes[.logRecordUid] = "01ARZ3NDEKTSV4RRFFQ69G5FAV"
    ~~~

    - Note: If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.
      The id MAY be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.
    - Requires: Value type should be `String`
    */
    case logRecordUid = "log.record.uid"
    /**
    The unique identifier of the feature flag.

    ~~~
    // Examples
    attributes[.featureFlagKey] = "logo-color"
    ~~~
    - Requires: Value type should be `String`
    */
    case featureFlagKey = "feature_flag.key"
    /**
    The name of the service provider that performs the flag evaluation.

    ~~~
    // Examples
    attributes[.featureFlagProviderName] = "Flag Manager"
    ~~~
    - Requires: Value type should be `String`
    */
    case featureFlagProviderName = "feature_flag.provider_name"
    /**
    SHOULD be a semantic identifier for a value. If one is unavailable, a stringified version of the value can be used.

    ~~~
    // Examples
    attributes[.featureFlagVariant] = "red"
    attributes[.featureFlagVariant] = "true"
    attributes[.featureFlagVariant] = "on"
    ~~~

    - Note: A semantic identifier, commonly referred to as a variant, provides a means
      for referring to a value without including the value itself. This can
      provide additional context for understanding the meaning behind a value.
      For example, the variant `red` maybe be used for the value `#c05543`.

      A stringified version of the value can be used in situations where a
      semantic identifier is unavailable. String representation of the value
      should be determined by the implementer.
    - Requires: Value type should be `String`
    */
    case featureFlagVariant = "feature_flag.variant"
    /**
    The stream associated with the log. See below for a list of well-known values.
    - Requires: Value should be one of [`SemanticAttributes.LogIostreamValues`](x-source-tag://otelLogIostreamValues) (of type `String`)
    */
    case logIostream = "log.iostream"
    /**
    The basename of the file.

    ~~~
    // Examples
    attributes[.logFileName] = "audit.log"
    ~~~
    - Requires: Value type should be `String`
    */
    case logFileName = "log.file.name"
    /**
    The full path to the file.

    ~~~
    // Examples
    attributes[.logFilePath] = "/var/log/mysql/audit.log"
    ~~~
    - Requires: Value type should be `String`
    */
    case logFilePath = "log.file.path"
    /**
    The basename of the file, with symlinks resolved.

    ~~~
    // Examples
    attributes[.logFileNameResolved] = "uuid.log"
    ~~~
    - Requires: Value type should be `String`
    */
    case logFileNameResolved = "log.file.name_resolved"
    /**
    The full path to the file, with symlinks resolved.

    ~~~
    // Examples
    attributes[.logFilePathResolved] = "/var/lib/docker/uuid.log"
    ~~~
    - Requires: Value type should be `String`
    */
    case logFilePathResolved = "log.file.path_resolved"
    /**
    Physical server IP address or Unix socket address. If set from the client, should simply use the socket's peer address, and not attempt to find any actual server IP (i.e., if set from client, this may represent some proxy server instead of the logical server).

    ~~~
    // Examples
    attributes[.serverSocketAddress] = "10.5.3.2"
    ~~~
    - Requires: Value type should be `String`
    */
    case serverSocketAddress = "server.socket.address"
    /**
    Name of the buffer pool.

    ~~~
    // Examples
    attributes[.pool] = "mapped"
    attributes[.pool] = "direct"
    ~~~

    - Note: Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
    - Requires: Value type should be `String`
    */
    case pool = "pool"
    /**
    The type of memory.

    ~~~
    // Examples
    attributes[.type] = "heap"
    attributes[.type] = "non_heap"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.TypeValues`](x-source-tag://otelTypeValues) (of type `String`)
    */
    case type = "type"
    /**
    The domain name of an immediate peer.

    ~~~
    // Examples
    attributes[.serverSocketDomain] = "proxy.example.com"
    ~~~

    - Note: Typically observed from the client side, and represents a proxy or other intermediary domain name.
    - Requires: Value type should be `String`
    */
    case serverSocketDomain = "server.socket.domain"
    /**
    Physical server port.

    ~~~
    // Examplesattributes[.serverSocketPort] = 16456
    ~~~
    - Requires: Value type should be `Int`
    */
    case serverSocketPort = "server.socket.port"
    /**
    The domain name of the source system.

    ~~~
    // Examples
    attributes[.sourceDomain] = "foo.example.com"
    ~~~

    - Note: This value may be a host name, a fully qualified domain name, or another host naming format.
    - Requires: Value type should be `String`
    */
    case sourceDomain = "source.domain"
    /**
    Source address, for example IP address or Unix socket name.

    ~~~
    // Examples
    attributes[.sourceAddress] = "10.5.3.2"
    ~~~
    - Requires: Value type should be `String`
    */
    case sourceAddress = "source.address"
    /**
    Source port number.

    ~~~
    // Examplesattributes[.sourcePort] = 3389attributes[.sourcePort] = 2888
    ~~~
    - Requires: Value type should be `Int`
    */
    case sourcePort = "source.port"
    /**
    The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).

    ~~~
    // Examples
    attributes[.awsLambdaInvokedArn] = "arn:aws:lambda:us-east-1:123456:function:myfunction:myalias"
    ~~~

    - Note: This may be different from `cloud.resource_id` if an alias is involved.
    - Requires: Value type should be `String`
    */
    case awsLambdaInvokedArn = "aws.lambda.invoked_arn"
    /**
    The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.

    ~~~
    // Examples
    attributes[.cloudeventsEventId] = "123e4567-e89b-12d3-a456-426614174000"
    attributes[.cloudeventsEventId] = "0001"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventId = "cloudevents.event_id"
    /**
    The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.

    ~~~
    // Examples
    attributes[.cloudeventsEventSource] = "https://github.com/cloudevents"
    attributes[.cloudeventsEventSource] = "/cloudevents/spec/pull/123"
    attributes[.cloudeventsEventSource] = "my-service"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventSource = "cloudevents.event_source"
    /**
    The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.

    ~~~
    // Examples
    attributes[.cloudeventsEventSpecVersion] = "1.0"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventSpecVersion = "cloudevents.event_spec_version"
    /**
    The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.

    ~~~
    // Examples
    attributes[.cloudeventsEventType] = "com.github.pull_request.opened"
    attributes[.cloudeventsEventType] = "com.example.object.deleted.v2"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventType = "cloudevents.event_type"
    /**
    The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).

    ~~~
    // Examples
    attributes[.cloudeventsEventSubject] = "mynewfile.jpg"
    ~~~
    - Requires: Value type should be `String`
    */
    case cloudeventsEventSubject = "cloudevents.event_subject"
    /**
    Parent-child Reference type.

    - Note: The causal relationship between a child Span and a parent Span.
    - Requires: Value should be one of [`SemanticAttributes.OpentracingRefTypeValues`](x-source-tag://otelOpentracingRefTypeValues) (of type `String`)
    */
    case opentracingRefType = "opentracing.ref_type"
    /**
    An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
    - Requires: Value should be one of [`SemanticAttributes.DbSystemValues`](x-source-tag://otelDbSystemValues) (of type `String`)
    */
    case dbSystem = "db.system"
    /**
    The connection string used to connect to the database. It is recommended to remove embedded credentials.

    ~~~
    // Examples
    attributes[.dbConnectionString] = "Server=(localdb)\v11.0;Integrated Security=true;"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbConnectionString = "db.connection_string"
    /**
    Username for accessing the database.

    ~~~
    // Examples
    attributes[.dbUser] = "readonly_user"
    attributes[.dbUser] = "reporting_user"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbUser = "db.user"
    /**
    The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.

    ~~~
    // Examples
    attributes[.dbJdbcDriverClassname] = "org.postgresql.Driver"
    attributes[.dbJdbcDriverClassname] = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbJdbcDriverClassname = "db.jdbc.driver_classname"
    /**
    This attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).

    ~~~
    // Examples
    attributes[.dbName] = "customers"
    attributes[.dbName] = "main"
    ~~~

    - Note: In some SQL databases, the database name to be used is called "schema name". In case there are multiple layers that could be considered for database name (e.g. Oracle instance name and schema name), the database name to be used is the more specific layer (e.g. Oracle schema name).
    - Requires: Value type should be `String`
    */
    case dbName = "db.name"
    /**
    The database statement being executed.

    ~~~
    // Examples
    attributes[.dbStatement] = "SELECT * FROM wuser_table"
    attributes[.dbStatement] = "SET mykey \"WuValue\""
    ~~~
    - Requires: Value type should be `String`
    */
    case dbStatement = "db.statement"
    /**
    The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.

    ~~~
    // Examples
    attributes[.dbOperation] = "findAndModify"
    attributes[.dbOperation] = "HMSET"
    attributes[.dbOperation] = "SELECT"
    ~~~

    - Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.
    - Requires: Value type should be `String`
    */
    case dbOperation = "db.operation"
    /**
    [OSI Transport Layer](https://osi-model.com/transport-layer/) or [Inter-process Communication method](https://en.wikipedia.org/wiki/Inter-process_communication). The value SHOULD be normalized to lowercase.

    ~~~
    // Examples
    attributes[.networkTransport] = "tcp"
    attributes[.networkTransport] = "udp"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetworkTransportValues`](x-source-tag://otelNetworkTransportValues) (of type `String`)
    */
    case networkTransport = "network.transport"
    /**
    [OSI Network Layer](https://osi-model.com/network-layer/) or non-OSI equivalent. The value SHOULD be normalized to lowercase.

    ~~~
    // Examples
    attributes[.networkType] = "ipv4"
    attributes[.networkType] = "ipv6"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetworkTypeValues`](x-source-tag://otelNetworkTypeValues) (of type `String`)
    */
    case networkType = "network.type"
    /**
    The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.

    ~~~
    // Examples
    attributes[.dbMssqlInstanceName] = "MSSQLSERVER"
    ~~~

    - Note: If setting a `db.mssql.instance_name`, `server.port` is no longer required (but still recommended if non-standard).
    - Requires: Value type should be `String`
    */
    case dbMssqlInstanceName = "db.mssql.instance_name"
    /**
    The fetch size used for paging, i.e. how many rows will be returned at once.

    ~~~
    // Examplesattributes[.dbCassandraPageSize] = 5000
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbCassandraPageSize = "db.cassandra.page_size"
    /**
    The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
    - Requires: Value should be one of [`SemanticAttributes.DbCassandraConsistencyLevelValues`](x-source-tag://otelDbCassandraConsistencyLevelValues) (of type `String`)
    */
    case dbCassandraConsistencyLevel = "db.cassandra.consistency_level"
    /**
    The name of the primary table that the operation is acting upon, including the keyspace name (if applicable).

    ~~~
    // Examples
    attributes[.dbCassandraTable] = "mytable"
    ~~~

    - Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
    - Requires: Value type should be `String`
    */
    case dbCassandraTable = "db.cassandra.table"
    /**
    Whether or not the query is idempotent.
    - Requires: Value type should be `Bool`
    */
    case dbCassandraIdempotence = "db.cassandra.idempotence"
    /**
    The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.

    ~~~
    // Examplesattributes[.dbCassandraSpeculativeExecutionCount] = 0attributes[.dbCassandraSpeculativeExecutionCount] = 2
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbCassandraSpeculativeExecutionCount = "db.cassandra.speculative_execution_count"
    /**
    The ID of the coordinating node for a query.

    ~~~
    // Examples
    attributes[.dbCassandraCoordinatorId] = "be13faa2-8574-4d71-926d-27f16cf8a7af"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCassandraCoordinatorId = "db.cassandra.coordinator.id"
    /**
    The data center of the coordinating node for a query.

    ~~~
    // Examples
    attributes[.dbCassandraCoordinatorDc] = "us-west-2"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCassandraCoordinatorDc = "db.cassandra.coordinator.dc"
    /**
    The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.

    ~~~
    // Examplesattributes[.dbRedisDatabaseIndex] = 0attributes[.dbRedisDatabaseIndex] = 1attributes[.dbRedisDatabaseIndex] = 15
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbRedisDatabaseIndex = "db.redis.database_index"
    /**
    The collection being accessed within the database stated in `db.name`.

    ~~~
    // Examples
    attributes[.dbMongodbCollection] = "customers"
    attributes[.dbMongodbCollection] = "products"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbMongodbCollection = "db.mongodb.collection"
    /**
    Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986).

    ~~~
    // Examples
    attributes[.urlFull] = "https://localhost:9200/index/_search?q=user.id:kimchy"
    ~~~

    - Note: For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.
      `url.full` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password should be redacted and attribute's value should be `https://REDACTED:REDACTED@www.example.com/`.
      `url.full` SHOULD capture the absolute URL when it is available (or can be reconstructed) and SHOULD NOT be validated or modified except for sanitizing purposes.
    - Requires: Value type should be `String`
    */
    case urlFull = "url.full"
    /**
    The name of the primary table that the operation is acting upon, including the database name (if applicable).

    ~~~
    // Examples
    attributes[.dbSqlTable] = "public.users"
    attributes[.dbSqlTable] = "customers"
    ~~~

    - Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
    - Requires: Value type should be `String`
    */
    case dbSqlTable = "db.sql.table"
    /**
    Unique Cosmos client instance id.

    ~~~
    // Examples
    attributes[.dbCosmosdbClientId] = "3ba4827d-4422-483f-b59f-85b74211c11d"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCosmosdbClientId = "db.cosmosdb.client_id"
    /**
    CosmosDB Operation Type.
    - Requires: Value should be one of [`SemanticAttributes.DbCosmosdbOperationTypeValues`](x-source-tag://otelDbCosmosdbOperationTypeValues) (of type `String`)
    */
    case dbCosmosdbOperationType = "db.cosmosdb.operation_type"
    /**
    Full user-agent string is generated by Cosmos DB SDK.

    ~~~
    // Examples
    attributes[.userAgentOriginal] = "cosmos-netstandard-sdk/3.23.0\|3.23.1\|1\|X64\|Linux 5.4.0-1098-azure 104 18\|.NET Core 3.1.32\|S\|"
    ~~~

    - Note: The user-agent value is generated by SDK which is a combination of<br> `sdk_version` : Current version of SDK. e.g. 'cosmos-netstandard-sdk/3.23.0'<br> `direct_pkg_version` : Direct package version used by Cosmos DB SDK. e.g. '3.23.1'<br> `number_of_client_instances` : Number of cosmos client instances created by the application. e.g. '1'<br> `type_of_machine_architecture` : Machine architecture. e.g. 'X64'<br> `operating_system` : Operating System. e.g. 'Linux 5.4.0-1098-azure 104 18'<br> `runtime_framework` : Runtime Framework. e.g. '.NET Core 3.1.32'<br> `failover_information` : Generated key to determine if region failover enabled.
         Format Reg-{D (Disabled discovery)}-S(application region)|L(List of preferred regions)|N(None, user did not configure it).
         Default value is "NS".
    - Requires: Value type should be `String`
    */
    case userAgentOriginal = "user_agent.original"
    /**
    Cosmos client connection mode.
    - Requires: Value should be one of [`SemanticAttributes.DbCosmosdbConnectionModeValues`](x-source-tag://otelDbCosmosdbConnectionModeValues) (of type `String`)
    */
    case dbCosmosdbConnectionMode = "db.cosmosdb.connection_mode"
    /**
    Cosmos DB container name.

    ~~~
    // Examples
    attributes[.dbCosmosdbContainer] = "anystring"
    ~~~
    - Requires: Value type should be `String`
    */
    case dbCosmosdbContainer = "db.cosmosdb.container"
    /**
    Request payload size in bytes.
    - Requires: Value type should be `Int`
    */
    case dbCosmosdbRequestContentLength = "db.cosmosdb.request_content_length"
    /**
    Cosmos DB status code.

    ~~~
    // Examplesattributes[.dbCosmosdbStatusCode] = 200attributes[.dbCosmosdbStatusCode] = 201
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbCosmosdbStatusCode = "db.cosmosdb.status_code"
    /**
    Cosmos DB sub status code.

    ~~~
    // Examplesattributes[.dbCosmosdbSubStatusCode] = 1000attributes[.dbCosmosdbSubStatusCode] = 1002
    ~~~
    - Requires: Value type should be `Int`
    */
    case dbCosmosdbSubStatusCode = "db.cosmosdb.sub_status_code"
    /**
    RU consumed for that operation.

    ~~~
    // Examplesattributes[.dbCosmosdbRequestCharge] = 46.18attributes[.dbCosmosdbRequestCharge] = 1.0
    ~~~
    - Requires: Value type should be `double`
    */
    case dbCosmosdbRequestCharge = "db.cosmosdb.request_charge"
    /**
    Name of the code, either "OK" or "ERROR". MUST NOT be set if the status code is UNSET.
    - Requires: Value should be one of [`SemanticAttributes.OtelStatusCodeValues`](x-source-tag://otelOtelStatusCodeValues) (of type `String`)
    */
    case otelStatusCode = "otel.status_code"
    /**
    Description of the Status if it has a value, otherwise not set.

    ~~~
    // Examples
    attributes[.otelStatusDescription] = "resource not found"
    ~~~
    - Requires: Value type should be `String`
    */
    case otelStatusDescription = "otel.status_description"
    /**
    Type of the trigger which caused this function invocation.

    - Note: For the server/consumer span on the incoming side,
      `faas.trigger` MUST be set.

      Clients invoking FaaS instances usually cannot set `faas.trigger`,
      since they would typically need to look in the payload to determine
      the event type. If clients set it, it should be the same as the
      trigger that corresponding incoming would have (i.e., this has
      nothing to do with the underlying transport used to make the API
      call to invoke the lambda, which is often HTTP).
    - Requires: Value should be one of [`SemanticAttributes.FaasTriggerValues`](x-source-tag://otelFaasTriggerValues) (of type `String`)
    */
    case faasTrigger = "faas.trigger"
    /**
    The invocation ID of the current function invocation.

    ~~~
    // Examples
    attributes[.faasInvocationId] = "af9d5aa4-a685-4c5f-a22b-444f80b3cc28"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasInvocationId = "faas.invocation_id"
    /**
    Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/en-us/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP).

    ~~~
    // Examples
    attributes[.cloudResourceId] = "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function"
    attributes[.cloudResourceId] = "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID"
    attributes[.cloudResourceId] = "/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
    ~~~

    - Note: On some cloud providers, it may not be possible to determine the full ID at startup,
      so it may be necessary to set `cloud.resource_id` as a span attribute instead.

      The exact value to use for `cloud.resource_id` depends on the cloud provider.
      The following well-known definitions MUST be used if you set this attribute and they apply:

      * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        Take care not to use the "invoked ARN" directly but replace any
        [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)
        with the resolved function version, as the same runtime instance may be invokable with
        multiple different aliases.
      * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
      * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id) of the invoked function,
        *not* the function app, having the form
        `/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.
        This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        a TracerProvider.
    - Requires: Value type should be `String`
    */
    case cloudResourceId = "cloud.resource_id"
    /**
    The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.

    ~~~
    // Examples
    attributes[.faasDocumentCollection] = "myBucketName"
    attributes[.faasDocumentCollection] = "myDbName"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentCollection = "faas.document.collection"
    /**
    Describes the type of the operation that was performed on the data.
    - Requires: Value should be one of [`SemanticAttributes.FaasDocumentOperationValues`](x-source-tag://otelFaasDocumentOperationValues) (of type `String`)
    */
    case faasDocumentOperation = "faas.document.operation"
    /**
    A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).

    ~~~
    // Examples
    attributes[.faasDocumentTime] = "2020-01-23T13:47:06Z"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentTime = "faas.document.time"
    /**
    The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.

    ~~~
    // Examples
    attributes[.faasDocumentName] = "myFile.txt"
    attributes[.faasDocumentName] = "myTableName"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasDocumentName = "faas.document.name"
    /**
    The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component.

    ~~~
    // Examples
    attributes[.urlPath] = "/search"
    ~~~

    - Note: When missing, the value is assumed to be `/`.
    - Requires: Value type should be `String`
    */
    case urlPath = "url.path"
    /**
    The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component.

    ~~~
    // Examples
    attributes[.urlQuery] = "q=OpenTelemetry"
    ~~~

    - Note: Sensitive content provided in query string SHOULD be scrubbed when instrumentations can identify it.
    - Requires: Value type should be `String`
    */
    case urlQuery = "url.query"
    /**
    A string identifying the messaging system.

    ~~~
    // Examples
    attributes[.messagingSystem] = "kafka"
    attributes[.messagingSystem] = "rabbitmq"
    attributes[.messagingSystem] = "rocketmq"
    attributes[.messagingSystem] = "activemq"
    attributes[.messagingSystem] = "AmazonSQS"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingSystem = "messaging.system"
    /**
    A string identifying the kind of messaging operation as defined in the [Operation names](#operation-names) section above.

    - Note: If a custom value is used, it MUST be of low cardinality.
    - Requires: Value should be one of [`SemanticAttributes.MessagingOperationValues`](x-source-tag://otelMessagingOperationValues) (of type `String`)
    */
    case messagingOperation = "messaging.operation"
    /**
    The number of messages sent, received, or processed in the scope of the batching operation.

    ~~~
    // Examplesattributes[.messagingBatchMessageCount] = 0attributes[.messagingBatchMessageCount] = 1attributes[.messagingBatchMessageCount] = 2
    ~~~

    - Note: Instrumentations SHOULD NOT set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use `messaging.batch.message_count` for batching APIs and SHOULD NOT use it for single-message APIs.
    - Requires: Value type should be `Int`
    */
    case messagingBatchMessageCount = "messaging.batch.message_count"
    /**
    A unique identifier for the client that consumes or produces a message.

    ~~~
    // Examples
    attributes[.messagingClientId] = "client-5"
    attributes[.messagingClientId] = "myhost@8742@s8083jm"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingClientId = "messaging.client_id"
    /**
    The message destination name.

    ~~~
    // Examples
    attributes[.messagingDestinationName] = "MyQueue"
    attributes[.messagingDestinationName] = "MyTopic"
    ~~~

    - Note: Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
      the broker does not have such notion, the destination name SHOULD uniquely identify the broker.
    - Requires: Value type should be `String`
    */
    case messagingDestinationName = "messaging.destination.name"
    /**
    Low cardinality representation of the messaging destination name.

    ~~~
    // Examples
    attributes[.messagingDestinationTemplate] = "/customers/{customerId}"
    ~~~

    - Note: Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
    - Requires: Value type should be `String`
    */
    case messagingDestinationTemplate = "messaging.destination.template"
    /**
    A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.
    - Requires: Value type should be `Bool`
    */
    case messagingDestinationTemporary = "messaging.destination.temporary"
    /**
    A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).
    - Requires: Value type should be `Bool`
    */
    case messagingDestinationAnonymous = "messaging.destination.anonymous"
    /**
    A value used by the messaging system as an identifier for the message, represented as a string.

    ~~~
    // Examples
    attributes[.messagingMessageId] = "452a7c7c7c7048c2f887f61572b18fc2"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingMessageId = "messaging.message.id"
    /**
    The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".

    ~~~
    // Examples
    attributes[.messagingMessageConversationId] = "MyConversationId"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingMessageConversationId = "messaging.message.conversation_id"
    /**
    The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.

    ~~~
    // Examplesattributes[.messagingMessagePayloadSizeBytes] = 2738
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingMessagePayloadSizeBytes = "messaging.message.payload_size_bytes"
    /**
    The compressed size of the message payload in bytes.

    ~~~
    // Examplesattributes[.messagingMessagePayloadCompressedSizeBytes] = 2048
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingMessagePayloadCompressedSizeBytes = "messaging.message.payload_compressed_size_bytes"
    /**
    A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).

    ~~~
    // Examples
    attributes[.faasTime] = "2020-01-23T13:47:06Z"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasTime = "faas.time"
    /**
    A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).

    ~~~
    // Examples
    attributes[.faasCron] = "0/5 * * * ? *"
    ~~~
    - Requires: Value type should be `String`
    */
    case faasCron = "faas.cron"
    /**
    A boolean that is true if the serverless function is executed for the first time (aka cold-start).
    - Requires: Value type should be `Bool`
    */
    case faasColdstart = "faas.coldstart"
    /**
    The name of the invoked function.

    ~~~
    // Examples
    attributes[.faasInvokedName] = "my-function"
    ~~~

    - Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.
    - Requires: Value type should be `String`
    */
    case faasInvokedName = "faas.invoked_name"
    /**
    The cloud provider of the invoked function.

    - Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
    - Requires: Value should be one of [`SemanticAttributes.FaasInvokedProviderValues`](x-source-tag://otelFaasInvokedProviderValues) (of type `String`)
    */
    case faasInvokedProvider = "faas.invoked_provider"
    /**
    The cloud region of the invoked function.

    ~~~
    // Examples
    attributes[.faasInvokedRegion] = "eu-central-1"
    ~~~

    - Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.
    - Requires: Value type should be `String`
    */
    case faasInvokedRegion = "faas.invoked_region"
    /**
    The internet connection type.

    ~~~
    // Examples
    attributes[.networkConnectionType] = "wifi"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetworkConnectionTypeValues`](x-source-tag://otelNetworkConnectionTypeValues) (of type `String`)
    */
    case networkConnectionType = "network.connection.type"
    /**
    This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.

    ~~~
    // Examples
    attributes[.networkConnectionSubtype] = "LTE"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.NetworkConnectionSubtypeValues`](x-source-tag://otelNetworkConnectionSubtypeValues) (of type `String`)
    */
    case networkConnectionSubtype = "network.connection.subtype"
    /**
    The name of the mobile carrier.

    ~~~
    // Examples
    attributes[.networkCarrierName] = "sprint"
    ~~~
    - Requires: Value type should be `String`
    */
    case networkCarrierName = "network.carrier.name"
    /**
    The mobile carrier country code.

    ~~~
    // Examples
    attributes[.networkCarrierMcc] = "310"
    ~~~
    - Requires: Value type should be `String`
    */
    case networkCarrierMcc = "network.carrier.mcc"
    /**
    The mobile carrier network code.

    ~~~
    // Examples
    attributes[.networkCarrierMnc] = "001"
    ~~~
    - Requires: Value type should be `String`
    */
    case networkCarrierMnc = "network.carrier.mnc"
    /**
    The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.

    ~~~
    // Examples
    attributes[.networkCarrierIcc] = "DE"
    ~~~
    - Requires: Value type should be `String`
    */
    case networkCarrierIcc = "network.carrier.icc"
    /**
    The [`service.name`](/docs/resource/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.

    ~~~
    // Examples
    attributes[.peerService] = "AuthTokenCache"
    ~~~
    - Requires: Value type should be `String`
    */
    case peerService = "peer.service"
    /**
    Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.

    ~~~
    // Examples
    attributes[.enduserId] = "username"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserId = "enduser.id"
    /**
    Actual/assumed role the client is making the request under extracted from token or application security context.

    ~~~
    // Examples
    attributes[.enduserRole] = "admin"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserRole = "enduser.role"
    /**
    Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).

    ~~~
    // Examples
    attributes[.enduserScope] = "read:message, write:files"
    ~~~
    - Requires: Value type should be `String`
    */
    case enduserScope = "enduser.scope"
    /**
    Current "managed" thread ID (as opposed to OS thread ID).

    ~~~
    // Examplesattributes[.threadId] = 42
    ~~~
    - Requires: Value type should be `Int`
    */
    case threadId = "thread.id"
    /**
    Current thread name.

    ~~~
    // Examples
    attributes[.threadName] = "main"
    ~~~
    - Requires: Value type should be `String`
    */
    case threadName = "thread.name"
    /**
    The method or function name, or equivalent (usually rightmost part of the code unit's name).

    ~~~
    // Examples
    attributes[.codeFunction] = "serveRequest"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeFunction = "code.function"
    /**
    The "namespace" within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.

    ~~~
    // Examples
    attributes[.codeNamespace] = "com.example.MyHttpService"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeNamespace = "code.namespace"
    /**
    The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).

    ~~~
    // Examples
    attributes[.codeFilepath] = "/usr/local/MyApplication/content_root/app/index.php"
    ~~~
    - Requires: Value type should be `String`
    */
    case codeFilepath = "code.filepath"
    /**
    The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.

    ~~~
    // Examplesattributes[.codeLineno] = 42
    ~~~
    - Requires: Value type should be `Int`
    */
    case codeLineno = "code.lineno"
    /**
    The column number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.

    ~~~
    // Examplesattributes[.codeColumn] = 16
    ~~~
    - Requires: Value type should be `Int`
    */
    case codeColumn = "code.column"
    /**
    Original HTTP method sent by the client in the request line.

    ~~~
    // Examples
    attributes[.httpRequestMethodOriginal] = "GeT"
    attributes[.httpRequestMethodOriginal] = "ACL"
    attributes[.httpRequestMethodOriginal] = "foo"
    ~~~
    - Requires: Value type should be `String`
    */
    case httpRequestMethodOriginal = "http.request.method_original"
    /**
    The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.

    ~~~
    // Examplesattributes[.httpRequestBodySize] = 3495
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpRequestBodySize = "http.request.body.size"
    /**
    The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.

    ~~~
    // Examplesattributes[.httpResponseBodySize] = 3495
    ~~~
    - Requires: Value type should be `Int`
    */
    case httpResponseBodySize = "http.response.body.size"
    /**
    The ordinal number of request resending attempt (for any reason, including redirects).

    ~~~
    // Examplesattributes[.httpResendCount] = 3
    ~~~

    - Note: The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).
    - Requires: Value type should be `Int`
    */
    case httpResendCount = "http.resend_count"
    /**
    The value `aws-api`.

    ~~~
    // Examples
    attributes[.rpcSystem] = "aws-api"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.RpcSystemValues`](x-source-tag://otelRpcSystemValues) (of type `String`)
    */
    case rpcSystem = "rpc.system"
    /**
    The name of the service to which a request is made, as returned by the AWS SDK.

    ~~~
    // Examples
    attributes[.rpcService] = "DynamoDB"
    attributes[.rpcService] = "S3"
    ~~~

    - Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
    - Requires: Value type should be `String`
    */
    case rpcService = "rpc.service"
    /**
    The name of the operation corresponding to the request, as returned by the AWS SDK.

    ~~~
    // Examples
    attributes[.rpcMethod] = "GetItem"
    attributes[.rpcMethod] = "PutItem"
    ~~~

    - Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
    - Requires: Value type should be `String`
    */
    case rpcMethod = "rpc.method"
    /**
    The AWS request ID as returned in the response headers `x-amz-request-id` or `x-amz-requestid`.

    ~~~
    // Examples
    attributes[.awsRequestId] = "79b9da39-b7ae-508a-a6bc-864b2829c622"
    attributes[.awsRequestId] = "C9ER4AJX75574TDJ"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsRequestId = "aws.request_id"
    /**
    The keys in the `RequestItems` object field.

    ~~~
    // Examplesattributes[.awsDynamodbTableNames] = Usersattributes[.awsDynamodbTableNames] = Cats
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbTableNames = "aws.dynamodb.table_names"
    /**
    The JSON-serialized value of each item in the `ConsumedCapacity` response field.

    ~~~
    // Examplesattributes[.awsDynamodbConsumedCapacity] = { "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbConsumedCapacity = "aws.dynamodb.consumed_capacity"
    /**
    The JSON-serialized value of the `ItemCollectionMetrics` response field.

    ~~~
    // Examples
    attributes[.awsDynamodbItemCollectionMetrics] = "{ \"string\" : [ { \"ItemCollectionKey\": { \"string\" : { \"B\": blob, \"BOOL\": boolean, \"BS\": [ blob ], \"L\": [ \"AttributeValue\" ], \"M\": { \"string\" : \"AttributeValue\" }, \"N\": \"string\", \"NS\": [ \"string\" ], \"NULL\": boolean, \"S\": \"string\", \"SS\": [ \"string\" ] } }, \"SizeEstimateRangeGB\": [ number ] } ] }"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbItemCollectionMetrics = "aws.dynamodb.item_collection_metrics"
    /**
    The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbProvisionedReadCapacity] = 1.0attributes[.awsDynamodbProvisionedReadCapacity] = 2.0
    ~~~
    - Requires: Value type should be `double`
    */
    case awsDynamodbProvisionedReadCapacity = "aws.dynamodb.provisioned_read_capacity"
    /**
    The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbProvisionedWriteCapacity] = 1.0attributes[.awsDynamodbProvisionedWriteCapacity] = 2.0
    ~~~
    - Requires: Value type should be `double`
    */
    case awsDynamodbProvisionedWriteCapacity = "aws.dynamodb.provisioned_write_capacity"
    /**
    The value of the `ConsistentRead` request parameter.
    - Requires: Value type should be `Bool`
    */
    case awsDynamodbConsistentRead = "aws.dynamodb.consistent_read"
    /**
    The value of the `ProjectionExpression` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbProjection] = "Title"
    attributes[.awsDynamodbProjection] = "Title, Price, Color"
    attributes[.awsDynamodbProjection] = "Title, Description, RelatedItems, ProductReviews"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbProjection = "aws.dynamodb.projection"
    /**
    The value of the `Limit` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbLimit] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbLimit = "aws.dynamodb.limit"
    /**
    The value of the `AttributesToGet` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbAttributesToGet] = livesattributes[.awsDynamodbAttributesToGet] = id
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbAttributesToGet = "aws.dynamodb.attributes_to_get"
    /**
    The value of the `IndexName` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbIndexName] = "name_to_group"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbIndexName = "aws.dynamodb.index_name"
    /**
    The value of the `Select` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbSelect] = "ALL_ATTRIBUTES"
    attributes[.awsDynamodbSelect] = "COUNT"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbSelect = "aws.dynamodb.select"
    /**
    The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.

    ~~~
    // Examplesattributes[.awsDynamodbGlobalSecondaryIndexes] = { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbGlobalSecondaryIndexes = "aws.dynamodb.global_secondary_indexes"
    /**
    The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.

    ~~~
    // Examplesattributes[.awsDynamodbLocalSecondaryIndexes] = { "IndexArn": "string", "IndexName": "string", "IndexSizeBytes": number, "ItemCount": number, "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbLocalSecondaryIndexes = "aws.dynamodb.local_secondary_indexes"
    /**
    The value of the `ExclusiveStartTableName` request parameter.

    ~~~
    // Examples
    attributes[.awsDynamodbExclusiveStartTable] = "Users"
    attributes[.awsDynamodbExclusiveStartTable] = "CatsTable"
    ~~~
    - Requires: Value type should be `String`
    */
    case awsDynamodbExclusiveStartTable = "aws.dynamodb.exclusive_start_table"
    /**
    The the number of items in the `TableNames` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbTableCount] = 20
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbTableCount = "aws.dynamodb.table_count"
    /**
    The value of the `ScanIndexForward` request parameter.
    - Requires: Value type should be `Bool`
    */
    case awsDynamodbScanForward = "aws.dynamodb.scan_forward"
    /**
    The value of the `Segment` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbSegment] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbSegment = "aws.dynamodb.segment"
    /**
    The value of the `TotalSegments` request parameter.

    ~~~
    // Examplesattributes[.awsDynamodbTotalSegments] = 100
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbTotalSegments = "aws.dynamodb.total_segments"
    /**
    The value of the `Count` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbCount] = 10
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbCount = "aws.dynamodb.count"
    /**
    The value of the `ScannedCount` response parameter.

    ~~~
    // Examplesattributes[.awsDynamodbScannedCount] = 50
    ~~~
    - Requires: Value type should be `Int`
    */
    case awsDynamodbScannedCount = "aws.dynamodb.scanned_count"
    /**
    The JSON-serialized value of each item in the `AttributeDefinitions` request field.

    ~~~
    // Examplesattributes[.awsDynamodbAttributeDefinitions] = { "AttributeName": "string", "AttributeType": "string" }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbAttributeDefinitions = "aws.dynamodb.attribute_definitions"
    /**
    The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.

    ~~~
    // Examplesattributes[.awsDynamodbGlobalSecondaryIndexUpdates] = { "Create": { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }
    ~~~
    - Requires: Value type should be `[String]`
    */
    case awsDynamodbGlobalSecondaryIndexUpdates = "aws.dynamodb.global_secondary_index_updates"
    /**
    The S3 bucket name the request refers to. Corresponds to the `--bucket` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.

    ~~~
    // Examples
    attributes[.awsS3Bucket] = "some-bucket-name"
    ~~~

    - Note: The `bucket` attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.
      This applies to almost all S3 operations except `list-buckets`.
    - Requires: Value type should be `String`
    */
    case awsS3Bucket = "aws.s3.bucket"
    /**
    The S3 object key the request refers to. Corresponds to the `--key` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.

    ~~~
    // Examples
    attributes[.awsS3Key] = "someFile.yml"
    ~~~

    - Note: The `key` attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.
      This applies in particular to the following operations:

      - [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)
      - [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html)
      - [get-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html)
      - [head-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html)
      - [put-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html)
      - [restore-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html)
      - [select-object-content](https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html)
      - [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)
      - [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)
      - [create-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html)
      - [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)
      - [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html).
    - Requires: Value type should be `String`
    */
    case awsS3Key = "aws.s3.key"
    /**
    The source object (in the form `bucket`/`key`) for the copy operation.

    ~~~
    // Examples
    attributes[.awsS3CopySource] = "someFile.yml"
    ~~~

    - Note: The `copy_source` attribute applies to S3 copy operations and corresponds to the `--copy-source` parameter
      of the [copy-object operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html).
      This applies in particular to the following operations:

      - [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html).
    - Requires: Value type should be `String`
    */
    case awsS3CopySource = "aws.s3.copy_source"
    /**
    Upload ID that identifies the multipart upload.

    ~~~
    // Examples
    attributes[.awsS3UploadId] = "dfRtDYWFbkRONycy.Yxwh66Yjlx.cph0gtNBtJ"
    ~~~

    - Note: The `upload_id` attribute applies to S3 multipart-upload operations and corresponds to the `--upload-id` parameter
      of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) multipart operations.
      This applies in particular to the following operations:

      - [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)
      - [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)
      - [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)
      - [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html).
    - Requires: Value type should be `String`
    */
    case awsS3UploadId = "aws.s3.upload_id"
    /**
    The delete request container that specifies the objects to be deleted.

    ~~~
    // Examples
    attributes[.awsS3Delete] = "Objects=[{Key=string,VersionId=string},{Key=string,VersionId=string}],Quiet=boolean"
    ~~~

    - Note: The `delete` attribute is only applicable to the [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html) operation.
      The `delete` attribute corresponds to the `--delete` parameter of the
      [delete-objects operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html).
    - Requires: Value type should be `String`
    */
    case awsS3Delete = "aws.s3.delete"
    /**
    The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.

    ~~~
    // Examplesattributes[.awsS3PartNumber] = 3456
    ~~~

    - Note: The `part_number` attribute is only applicable to the [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
      and [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html) operations.
      The `part_number` attribute corresponds to the `--part-number` parameter of the
      [upload-part operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html).
    - Requires: Value type should be `Int`
    */
    case awsS3PartNumber = "aws.s3.part_number"
    /**
    The name of the operation being executed.

    ~~~
    // Examples
    attributes[.graphqlOperationName] = "findBookById"
    ~~~
    - Requires: Value type should be `String`
    */
    case graphqlOperationName = "graphql.operation.name"
    /**
    The type of the operation being executed.

    ~~~
    // Examples
    attributes[.graphqlOperationType] = "query"
    attributes[.graphqlOperationType] = "mutation"
    attributes[.graphqlOperationType] = "subscription"
    ~~~
    - Requires: Value should be one of [`SemanticAttributes.GraphqlOperationTypeValues`](x-source-tag://otelGraphqlOperationTypeValues) (of type `String`)
    */
    case graphqlOperationType = "graphql.operation.type"
    /**
    The GraphQL document being executed.

    ~~~
    // Examples
    attributes[.graphqlDocument] = "query findBookById { bookById(id: ?) { name } }"
    ~~~

    - Note: The value may be sanitized to exclude sensitive information.
    - Requires: Value type should be `String`
    */
    case graphqlDocument = "graphql.document"
    /**
    RabbitMQ message routing key.

    ~~~
    // Examples
    attributes[.messagingRabbitmqDestinationRoutingKey] = "myKey"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRabbitmqDestinationRoutingKey = "messaging.rabbitmq.destination.routing_key"
    /**
    Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute MUST NOT be set.

    ~~~
    // Examples
    attributes[.messagingKafkaMessageKey] = "myKey"
    ~~~

    - Note: If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.
    - Requires: Value type should be `String`
    */
    case messagingKafkaMessageKey = "messaging.kafka.message.key"
    /**
    Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.

    ~~~
    // Examples
    attributes[.messagingKafkaConsumerGroup] = "my-group"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingKafkaConsumerGroup = "messaging.kafka.consumer.group"
    /**
    Partition the message is sent to.

    ~~~
    // Examplesattributes[.messagingKafkaDestinationPartition] = 2
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingKafkaDestinationPartition = "messaging.kafka.destination.partition"
    /**
    The offset of a record in the corresponding Kafka partition.

    ~~~
    // Examplesattributes[.messagingKafkaMessageOffset] = 42
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingKafkaMessageOffset = "messaging.kafka.message.offset"
    /**
    A boolean that is true if the message is a tombstone.
    - Requires: Value type should be `Bool`
    */
    case messagingKafkaMessageTombstone = "messaging.kafka.message.tombstone"
    /**
    Namespace of RocketMQ resources, resources in different namespaces are individual.

    ~~~
    // Examples
    attributes[.messagingRocketmqNamespace] = "myNamespace"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqNamespace = "messaging.rocketmq.namespace"
    /**
    Name of the RocketMQ producer/consumer group that is handling the message. The client type is identified by the SpanKind.

    ~~~
    // Examples
    attributes[.messagingRocketmqClientGroup] = "myConsumerGroup"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqClientGroup = "messaging.rocketmq.client_group"
    /**
    The timestamp in milliseconds that the delay message is expected to be delivered to consumer.

    ~~~
    // Examplesattributes[.messagingRocketmqMessageDeliveryTimestamp] = 1665987217045
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingRocketmqMessageDeliveryTimestamp = "messaging.rocketmq.message.delivery_timestamp"
    /**
    The delay time level for delay message, which determines the message delay time.

    ~~~
    // Examplesattributes[.messagingRocketmqMessageDelayTimeLevel] = 3
    ~~~
    - Requires: Value type should be `Int`
    */
    case messagingRocketmqMessageDelayTimeLevel = "messaging.rocketmq.message.delay_time_level"
    /**
    It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.

    ~~~
    // Examples
    attributes[.messagingRocketmqMessageGroup] = "myMessageGroup"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqMessageGroup = "messaging.rocketmq.message.group"
    /**
    Type of message.
    - Requires: Value should be one of [`SemanticAttributes.MessagingRocketmqMessageTypeValues`](x-source-tag://otelMessagingRocketmqMessageTypeValues) (of type `String`)
    */
    case messagingRocketmqMessageType = "messaging.rocketmq.message.type"
    /**
    The secondary classifier of message besides topic.

    ~~~
    // Examples
    attributes[.messagingRocketmqMessageTag] = "tagA"
    ~~~
    - Requires: Value type should be `String`
    */
    case messagingRocketmqMessageTag = "messaging.rocketmq.message.tag"
    /**
    Key(s) of message, another way to mark message besides message id.

    ~~~
    // Examplesattributes[.messagingRocketmqMessageKeys] = keyAattributes[.messagingRocketmqMessageKeys] = keyB
    ~~~
    - Requires: Value type should be `[String]`
    */
    case messagingRocketmqMessageKeys = "messaging.rocketmq.message.keys"
    /**
    Model of message consumption. This only applies to consumer spans.
    - Requires: Value should be one of [`SemanticAttributes.MessagingRocketmqConsumptionModelValues`](x-source-tag://otelMessagingRocketmqConsumptionModelValues) (of type `String`)
    */
    case messagingRocketmqConsumptionModel = "messaging.rocketmq.consumption_model"
    /**
    The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    - Requires: Value should be one of [`SemanticAttributes.RpcGrpcStatusCodeValues`](x-source-tag://otelRpcGrpcStatusCodeValues) (of type `Int`)
    */
    case rpcGrpcStatusCode = "rpc.grpc.status_code"
    /**
    Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.

    ~~~
    // Examples
    attributes[.rpcJsonrpcVersion] = "2.0"
    attributes[.rpcJsonrpcVersion] = "1.0"
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcVersion = "rpc.jsonrpc.version"
    /**
    `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.

    ~~~
    // Examples
    attributes[.rpcJsonrpcRequestId] = "10"
    attributes[.rpcJsonrpcRequestId] = "request-7"
    attributes[.rpcJsonrpcRequestId] = ""
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcRequestId = "rpc.jsonrpc.request_id"
    /**
    `error.code` property of response if it is an error response.

    ~~~
    // Examplesattributes[.rpcJsonrpcErrorCode] = -32700attributes[.rpcJsonrpcErrorCode] = 100
    ~~~
    - Requires: Value type should be `Int`
    */
    case rpcJsonrpcErrorCode = "rpc.jsonrpc.error_code"
    /**
    `error.message` property of response if it is an error response.

    ~~~
    // Examples
    attributes[.rpcJsonrpcErrorMessage] = "Parse error"
    attributes[.rpcJsonrpcErrorMessage] = "User already exists"
    ~~~
    - Requires: Value type should be `String`
    */
    case rpcJsonrpcErrorMessage = "rpc.jsonrpc.error_message"
    /**
    Whether this is a received or sent message.
    - Requires: Value should be one of [`SemanticAttributes.MessageTypeValues`](x-source-tag://otelMessageTypeValues) (of type `String`)
    */
    case messageType = "message.type"
    /**
    MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.

    - Note: This way we guarantee that the values will be consistent between different implementations.
    - Requires: Value type should be `Int`
    */
    case messageId = "message.id"
    /**
    Compressed size of the message in bytes.
    - Requires: Value type should be `Int`
    */
    case messageCompressedSize = "message.compressed_size"
    /**
    Uncompressed size of the message in bytes.
    - Requires: Value type should be `Int`
    */
    case messageUncompressedSize = "message.uncompressed_size"
    /**
    The [error codes](https://connect.build/docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
    - Requires: Value should be one of [`SemanticAttributes.RpcConnectRpcErrorCodeValues`](x-source-tag://otelRpcConnectRpcErrorCodeValues) (of type `String`)
    */
    case rpcConnectRpcErrorCode = "rpc.connect_rpc.error_code"
    /**
    SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.

    - Note: An exception is considered to have escaped (or left) the scope of a span,
      if that span is ended while the exception is still logically "in flight".
      This may be actually "in flight" in some languages (e.g. if the exception
      is passed to a Context manager's `__exit__` method in Python) but will
      usually be caught at the point of recording the exception in most languages.

      It is usually not possible to determine at the point where an exception is thrown
      whether it will escape the scope of a span.
      However, it is trivial to know that an exception
      will escape, if one checks for an active exception just before ending the span,
      as done in the [example above](#recording-an-exception).

      It follows that an exception may still escape the scope of the span
      even if the `exception.escaped` attribute was not set or set to false,
      since the event might have been recorded at a time where it was not
      clear whether the exception will escape.
    - Requires: Value type should be `Bool`
    */
    case exceptionEscaped = "exception.escaped"
    /**
    The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component.

    ~~~
    // Examples
    attributes[.urlFragment] = "SemConv"
    ~~~
    - Requires: Value type should be `String`
    */
    case urlFragment = "url.fragment"

    // MARK: - Manual Definitions
    // Some definitions have not yet been added to the YAML which generates this script.
    // As such as we have some manually defined cases.

    /**
    An exception event **MUST** be called "exception" as per the [specification](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/exceptions.md).
    */
    case exception = "exception"

    /**
    Deprecated, use `network.transport`.
    */
    /// - Tag: otelNetTransportValues
    public struct NetTransportValues: CustomStringConvertible {
        /**
        ip_tcp.
        */
        public static let ipTcp = NetTransportValues("ip_tcp")
        /**
        ip_udp.
        */
        public static let ipUdp = NetTransportValues("ip_udp")
        /**
        Named or anonymous pipe.
        */
        public static let pipe = NetTransportValues("pipe")
        /**
        In-process communication.
        */
        public static let inproc = NetTransportValues("inproc")
        /**
        Something else (non IP-based).
        */
        public static let other = NetTransportValues("other")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    Deprecated, use `network.transport` and `network.type`.
    */
    /// - Tag: otelNetSockFamilyValues
    public struct NetSockFamilyValues: CustomStringConvertible {
        /**
        IPv4 address.
        */
        public static let inet = NetSockFamilyValues("inet")
        /**
        IPv6 address.
        */
        public static let inet6 = NetSockFamilyValues("inet6")
        /**
        Unix domain socket path.
        */
        public static let unix = NetSockFamilyValues("unix")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    HTTP request method.
    */
    /// - Tag: otelHttpRequestMethodValues
    public struct HttpRequestMethodValues: CustomStringConvertible {
        /**
        CONNECT method.
        */
        public static let connect = HttpRequestMethodValues("CONNECT")
        /**
        DELETE method.
        */
        public static let delete = HttpRequestMethodValues("DELETE")
        /**
        GET method.
        */
        public static let get = HttpRequestMethodValues("GET")
        /**
        HEAD method.
        */
        public static let head = HttpRequestMethodValues("HEAD")
        /**
        OPTIONS method.
        */
        public static let options = HttpRequestMethodValues("OPTIONS")
        /**
        PATCH method.
        */
        public static let patch = HttpRequestMethodValues("PATCH")
        /**
        POST method.
        */
        public static let post = HttpRequestMethodValues("POST")
        /**
        PUT method.
        */
        public static let put = HttpRequestMethodValues("PUT")
        /**
        TRACE method.
        */
        public static let trace = HttpRequestMethodValues("TRACE")
        /**
        Any HTTP method that the instrumentation has no prior knowledge of.
        */
        public static let other = HttpRequestMethodValues("_OTHER")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    The domain identifies the business context for the events.
    */
    /// - Tag: otelEventDomainValues
    public struct EventDomainValues: CustomStringConvertible {
        /**
        Events from browser apps.
        */
        public static let browser = EventDomainValues("browser")
        /**
        Events from mobile apps.
        */
        public static let device = EventDomainValues("device")
        /**
        Events from Kubernetes.
        */
        public static let k8s = EventDomainValues("k8s")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    The stream associated with the log. See below for a list of well-known values.
    */
    /// - Tag: otelLogIostreamValues
    public enum LogIostreamValues: String {
        /**
        Logs from stdout stream.
        */
        case stdout
        /**
        Events from stderr stream.
        */
        case stderr
    }

    /**
    The type of memory.
    */
    /// - Tag: otelTypeValues
    public enum TypeValues: String {
        /**
        Heap memory.
        */
        case heap
        /**
        Non-heap memory.
        */
        case non_heap
    }

    /**
    Parent-child Reference type.
    */
    /// - Tag: otelOpentracingRefTypeValues
    public enum OpentracingRefTypeValues: String {
        /**
        The parent Span depends on the child Span in some capacity.
        */
        case child_of
        /**
        The parent Span does not depend in any way on the result of the child Span.
        */
        case follows_from
    }

    /**
    An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
    */
    /// - Tag: otelDbSystemValues
    public struct DbSystemValues: CustomStringConvertible {
        /**
        Some other SQL database. Fallback only. See notes.
        */
        public static let otherSql = DbSystemValues("other_sql")
        /**
        Microsoft SQL Server.
        */
        public static let mssql = DbSystemValues("mssql")
        /**
        Microsoft SQL Server Compact.
        */
        public static let mssqlcompact = DbSystemValues("mssqlcompact")
        /**
        MySQL.
        */
        public static let mysql = DbSystemValues("mysql")
        /**
        Oracle Database.
        */
        public static let oracle = DbSystemValues("oracle")
        /**
        IBM Db2.
        */
        public static let db2 = DbSystemValues("db2")
        /**
        PostgreSQL.
        */
        public static let postgresql = DbSystemValues("postgresql")
        /**
        Amazon Redshift.
        */
        public static let redshift = DbSystemValues("redshift")
        /**
        Apache Hive.
        */
        public static let hive = DbSystemValues("hive")
        /**
        Cloudscape.
        */
        public static let cloudscape = DbSystemValues("cloudscape")
        /**
        HyperSQL DataBase.
        */
        public static let hsqldb = DbSystemValues("hsqldb")
        /**
        Progress Database.
        */
        public static let progress = DbSystemValues("progress")
        /**
        SAP MaxDB.
        */
        public static let maxdb = DbSystemValues("maxdb")
        /**
        SAP HANA.
        */
        public static let hanadb = DbSystemValues("hanadb")
        /**
        Ingres.
        */
        public static let ingres = DbSystemValues("ingres")
        /**
        FirstSQL.
        */
        public static let firstsql = DbSystemValues("firstsql")
        /**
        EnterpriseDB.
        */
        public static let edb = DbSystemValues("edb")
        /**
        InterSystems Caché.
        */
        public static let cache = DbSystemValues("cache")
        /**
        Adabas (Adaptable Database System).
        */
        public static let adabas = DbSystemValues("adabas")
        /**
        Firebird.
        */
        public static let firebird = DbSystemValues("firebird")
        /**
        Apache Derby.
        */
        public static let derby = DbSystemValues("derby")
        /**
        FileMaker.
        */
        public static let filemaker = DbSystemValues("filemaker")
        /**
        Informix.
        */
        public static let informix = DbSystemValues("informix")
        /**
        InstantDB.
        */
        public static let instantdb = DbSystemValues("instantdb")
        /**
        InterBase.
        */
        public static let interbase = DbSystemValues("interbase")
        /**
        MariaDB.
        */
        public static let mariadb = DbSystemValues("mariadb")
        /**
        Netezza.
        */
        public static let netezza = DbSystemValues("netezza")
        /**
        Pervasive PSQL.
        */
        public static let pervasive = DbSystemValues("pervasive")
        /**
        PointBase.
        */
        public static let pointbase = DbSystemValues("pointbase")
        /**
        SQLite.
        */
        public static let sqlite = DbSystemValues("sqlite")
        /**
        Sybase.
        */
        public static let sybase = DbSystemValues("sybase")
        /**
        Teradata.
        */
        public static let teradata = DbSystemValues("teradata")
        /**
        Vertica.
        */
        public static let vertica = DbSystemValues("vertica")
        /**
        H2.
        */
        public static let h2 = DbSystemValues("h2")
        /**
        ColdFusion IMQ.
        */
        public static let coldfusion = DbSystemValues("coldfusion")
        /**
        Apache Cassandra.
        */
        public static let cassandra = DbSystemValues("cassandra")
        /**
        Apache HBase.
        */
        public static let hbase = DbSystemValues("hbase")
        /**
        MongoDB.
        */
        public static let mongodb = DbSystemValues("mongodb")
        /**
        Redis.
        */
        public static let redis = DbSystemValues("redis")
        /**
        Couchbase.
        */
        public static let couchbase = DbSystemValues("couchbase")
        /**
        CouchDB.
        */
        public static let couchdb = DbSystemValues("couchdb")
        /**
        Microsoft Azure Cosmos DB.
        */
        public static let cosmosdb = DbSystemValues("cosmosdb")
        /**
        Amazon DynamoDB.
        */
        public static let dynamodb = DbSystemValues("dynamodb")
        /**
        Neo4j.
        */
        public static let neo4j = DbSystemValues("neo4j")
        /**
        Apache Geode.
        */
        public static let geode = DbSystemValues("geode")
        /**
        Elasticsearch.
        */
        public static let elasticsearch = DbSystemValues("elasticsearch")
        /**
        Memcached.
        */
        public static let memcached = DbSystemValues("memcached")
        /**
        CockroachDB.
        */
        public static let cockroachdb = DbSystemValues("cockroachdb")
        /**
        OpenSearch.
        */
        public static let opensearch = DbSystemValues("opensearch")
        /**
        ClickHouse.
        */
        public static let clickhouse = DbSystemValues("clickhouse")
        /**
        Cloud Spanner.
        */
        public static let spanner = DbSystemValues("spanner")
        /**
        Trino.
        */
        public static let trino = DbSystemValues("trino")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    [OSI Transport Layer](https://osi-model.com/transport-layer/) or [Inter-process Communication method](https://en.wikipedia.org/wiki/Inter-process_communication). The value SHOULD be normalized to lowercase.
    */
    /// - Tag: otelNetworkTransportValues
    public struct NetworkTransportValues: CustomStringConvertible {
        /**
        TCP.
        */
        public static let tcp = NetworkTransportValues("tcp")
        /**
        UDP.
        */
        public static let udp = NetworkTransportValues("udp")
        /**
        Named or anonymous pipe. See note below.
        */
        public static let pipe = NetworkTransportValues("pipe")
        /**
        Unix domain socket.
        */
        public static let unix = NetworkTransportValues("unix")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    [OSI Network Layer](https://osi-model.com/network-layer/) or non-OSI equivalent. The value SHOULD be normalized to lowercase.
    */
    /// - Tag: otelNetworkTypeValues
    public struct NetworkTypeValues: CustomStringConvertible {
        /**
        IPv4.
        */
        public static let ipv4 = NetworkTypeValues("ipv4")
        /**
        IPv6.
        */
        public static let ipv6 = NetworkTypeValues("ipv6")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
    */
    /// - Tag: otelDbCassandraConsistencyLevelValues
    public enum DbCassandraConsistencyLevelValues: String {
        /**
        all.
        */
        case all
        /**
        each_quorum.
        */
        case each_quorum
        /**
        quorum.
        */
        case quorum
        /**
        local_quorum.
        */
        case local_quorum
        /**
        one.
        */
        case one
        /**
        two.
        */
        case two
        /**
        three.
        */
        case three
        /**
        local_one.
        */
        case local_one
        /**
        any.
        */
        case any
        /**
        serial.
        */
        case serial
        /**
        local_serial.
        */
        case local_serial
    }

    /**
    CosmosDB Operation Type.
    */
    /// - Tag: otelDbCosmosdbOperationTypeValues
    public struct DbCosmosdbOperationTypeValues: CustomStringConvertible {
        /**
        invalid.
        */
        public static let invalid = DbCosmosdbOperationTypeValues("Invalid")
        /**
        create.
        */
        public static let create = DbCosmosdbOperationTypeValues("Create")
        /**
        patch.
        */
        public static let patch = DbCosmosdbOperationTypeValues("Patch")
        /**
        read.
        */
        public static let read = DbCosmosdbOperationTypeValues("Read")
        /**
        read_feed.
        */
        public static let readFeed = DbCosmosdbOperationTypeValues("ReadFeed")
        /**
        delete.
        */
        public static let delete = DbCosmosdbOperationTypeValues("Delete")
        /**
        replace.
        */
        public static let replace = DbCosmosdbOperationTypeValues("Replace")
        /**
        execute.
        */
        public static let execute = DbCosmosdbOperationTypeValues("Execute")
        /**
        query.
        */
        public static let query = DbCosmosdbOperationTypeValues("Query")
        /**
        head.
        */
        public static let head = DbCosmosdbOperationTypeValues("Head")
        /**
        head_feed.
        */
        public static let headFeed = DbCosmosdbOperationTypeValues("HeadFeed")
        /**
        upsert.
        */
        public static let upsert = DbCosmosdbOperationTypeValues("Upsert")
        /**
        batch.
        */
        public static let batch = DbCosmosdbOperationTypeValues("Batch")
        /**
        query_plan.
        */
        public static let queryPlan = DbCosmosdbOperationTypeValues("QueryPlan")
        /**
        execute_javascript.
        */
        public static let executeJavascript = DbCosmosdbOperationTypeValues("ExecuteJavaScript")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    Cosmos client connection mode.
    */
    /// - Tag: otelDbCosmosdbConnectionModeValues
    public enum DbCosmosdbConnectionModeValues: String {
        /**
        Gateway (HTTP) connections mode.
        */
        case gateway
        /**
        Direct connection.
        */
        case direct
    }

    /**
    Name of the code, either "OK" or "ERROR". MUST NOT be set if the status code is UNSET.
    */
    /// - Tag: otelOtelStatusCodeValues
    public enum OtelStatusCodeValues: String {
        /**
        The operation has been validated by an Application developer or Operator to have completed successfully.
        */
        case ok = "OK"
        /**
        The operation contains an error.
        */
        case error = "ERROR"
    }

    /**
    Type of the trigger which caused this function invocation.
    */
    /// - Tag: otelFaasTriggerValues
    public enum FaasTriggerValues: String {
        /**
        A response to some data source operation such as a database or filesystem read/write.
        */
        case datasource
        /**
        To provide an answer to an inbound HTTP request.
        */
        case http
        /**
        A function is set to be executed when messages are sent to a messaging system.
        */
        case pubsub
        /**
        A function is scheduled to be executed regularly.
        */
        case timer
        /**
        If none of the others apply.
        */
        case other
    }

    /**
    Describes the type of the operation that was performed on the data.
    */
    /// - Tag: otelFaasDocumentOperationValues
    public struct FaasDocumentOperationValues: CustomStringConvertible {
        /**
        When a new object is created.
        */
        public static let insert = FaasDocumentOperationValues("insert")
        /**
        When an object is modified.
        */
        public static let edit = FaasDocumentOperationValues("edit")
        /**
        When an object is deleted.
        */
        public static let delete = FaasDocumentOperationValues("delete")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    A string identifying the kind of messaging operation as defined in the [Operation names](#operation-names) section above.
    */
    /// - Tag: otelMessagingOperationValues
    public struct MessagingOperationValues: CustomStringConvertible {
        /**
        publish.
        */
        public static let publish = MessagingOperationValues("publish")
        /**
        receive.
        */
        public static let receive = MessagingOperationValues("receive")
        /**
        process.
        */
        public static let process = MessagingOperationValues("process")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    The cloud provider of the invoked function.
    */
    /// - Tag: otelFaasInvokedProviderValues
    public struct FaasInvokedProviderValues: CustomStringConvertible {
        /**
        Alibaba Cloud.
        */
        public static let alibabaCloud = FaasInvokedProviderValues("alibaba_cloud")
        /**
        Amazon Web Services.
        */
        public static let aws = FaasInvokedProviderValues("aws")
        /**
        Microsoft Azure.
        */
        public static let azure = FaasInvokedProviderValues("azure")
        /**
        Google Cloud Platform.
        */
        public static let gcp = FaasInvokedProviderValues("gcp")
        /**
        Tencent Cloud.
        */
        public static let tencentCloud = FaasInvokedProviderValues("tencent_cloud")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    The internet connection type.
    */
    /// - Tag: otelNetworkConnectionTypeValues
    public struct NetworkConnectionTypeValues: CustomStringConvertible {
        /**
        wifi.
        */
        public static let wifi = NetworkConnectionTypeValues("wifi")
        /**
        wired.
        */
        public static let wired = NetworkConnectionTypeValues("wired")
        /**
        cell.
        */
        public static let cell = NetworkConnectionTypeValues("cell")
        /**
        unavailable.
        */
        public static let unavailable = NetworkConnectionTypeValues("unavailable")
        /**
        unknown.
        */
        public static let unknown = NetworkConnectionTypeValues("unknown")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
    */
    /// - Tag: otelNetworkConnectionSubtypeValues
    public struct NetworkConnectionSubtypeValues: CustomStringConvertible {
        /**
        GPRS.
        */
        public static let gprs = NetworkConnectionSubtypeValues("gprs")
        /**
        EDGE.
        */
        public static let edge = NetworkConnectionSubtypeValues("edge")
        /**
        UMTS.
        */
        public static let umts = NetworkConnectionSubtypeValues("umts")
        /**
        CDMA.
        */
        public static let cdma = NetworkConnectionSubtypeValues("cdma")
        /**
        EVDO Rel. 0.
        */
        public static let evdo0 = NetworkConnectionSubtypeValues("evdo_0")
        /**
        EVDO Rev. A.
        */
        public static let evdoA = NetworkConnectionSubtypeValues("evdo_a")
        /**
        CDMA2000 1XRTT.
        */
        public static let cdma20001xrtt = NetworkConnectionSubtypeValues("cdma2000_1xrtt")
        /**
        HSDPA.
        */
        public static let hsdpa = NetworkConnectionSubtypeValues("hsdpa")
        /**
        HSUPA.
        */
        public static let hsupa = NetworkConnectionSubtypeValues("hsupa")
        /**
        HSPA.
        */
        public static let hspa = NetworkConnectionSubtypeValues("hspa")
        /**
        IDEN.
        */
        public static let iden = NetworkConnectionSubtypeValues("iden")
        /**
        EVDO Rev. B.
        */
        public static let evdoB = NetworkConnectionSubtypeValues("evdo_b")
        /**
        LTE.
        */
        public static let lte = NetworkConnectionSubtypeValues("lte")
        /**
        EHRPD.
        */
        public static let ehrpd = NetworkConnectionSubtypeValues("ehrpd")
        /**
        HSPAP.
        */
        public static let hspap = NetworkConnectionSubtypeValues("hspap")
        /**
        GSM.
        */
        public static let gsm = NetworkConnectionSubtypeValues("gsm")
        /**
        TD-SCDMA.
        */
        public static let tdScdma = NetworkConnectionSubtypeValues("td_scdma")
        /**
        IWLAN.
        */
        public static let iwlan = NetworkConnectionSubtypeValues("iwlan")
        /**
        5G NR (New Radio).
        */
        public static let nr = NetworkConnectionSubtypeValues("nr")
        /**
        5G NRNSA (New Radio Non-Standalone).
        */
        public static let nrnsa = NetworkConnectionSubtypeValues("nrnsa")
        /**
        LTE CA.
        */
        public static let lteCa = NetworkConnectionSubtypeValues("lte_ca")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    The value `aws-api`.
    */
    /// - Tag: otelRpcSystemValues
    public struct RpcSystemValues: CustomStringConvertible {
        /**
        gRPC.
        */
        public static let grpc = RpcSystemValues("grpc")
        /**
        Java RMI.
        */
        public static let javaRmi = RpcSystemValues("java_rmi")
        /**
        .NET WCF.
        */
        public static let dotnetWcf = RpcSystemValues("dotnet_wcf")
        /**
        Apache Dubbo.
        */
        public static let apacheDubbo = RpcSystemValues("apache_dubbo")
        /**
        Connect RPC.
        */
        public static let connectRpc = RpcSystemValues("connect_rpc")

        internal let value: String

        public init(_ customValue: String) {
            self.value = customValue
        }

        public var description: String {
            return value
        }
    }

    /**
    The type of the operation being executed.
    */
    /// - Tag: otelGraphqlOperationTypeValues
    public enum GraphqlOperationTypeValues: String {
        /**
        GraphQL query.
        */
        case query
        /**
        GraphQL mutation.
        */
        case mutation
        /**
        GraphQL subscription.
        */
        case subscription
    }

    /**
    Type of message.
    */
    /// - Tag: otelMessagingRocketmqMessageTypeValues
    public enum MessagingRocketmqMessageTypeValues: String {
        /**
        Normal message.
        */
        case normal
        /**
        FIFO message.
        */
        case fifo
        /**
        Delay message.
        */
        case delay
        /**
        Transaction message.
        */
        case transaction
    }

    /**
    Model of message consumption. This only applies to consumer spans.
    */
    /// - Tag: otelMessagingRocketmqConsumptionModelValues
    public enum MessagingRocketmqConsumptionModelValues: String {
        /**
        Clustering consumption model.
        */
        case clustering
        /**
        Broadcasting consumption model.
        */
        case broadcasting
    }

    /**
    The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
    */
    /// - Tag: otelRpcGrpcStatusCodeValues
    public enum RpcGrpcStatusCodeValues: Int {
        /**
        OK.
        */
        case ok = 0
        /**
        CANCELLED.
        */
        case cancelled = 1
        /**
        UNKNOWN.
        */
        case unknown = 2
        /**
        INVALID_ARGUMENT.
        */
        case invalid_argument = 3
        /**
        DEADLINE_EXCEEDED.
        */
        case deadline_exceeded = 4
        /**
        NOT_FOUND.
        */
        case not_found = 5
        /**
        ALREADY_EXISTS.
        */
        case already_exists = 6
        /**
        PERMISSION_DENIED.
        */
        case permission_denied = 7
        /**
        RESOURCE_EXHAUSTED.
        */
        case resource_exhausted = 8
        /**
        FAILED_PRECONDITION.
        */
        case failed_precondition = 9
        /**
        ABORTED.
        */
        case aborted = 10
        /**
        OUT_OF_RANGE.
        */
        case out_of_range = 11
        /**
        UNIMPLEMENTED.
        */
        case unimplemented = 12
        /**
        INTERNAL.
        */
        case `internal` = 13
        /**
        UNAVAILABLE.
        */
        case unavailable = 14
        /**
        DATA_LOSS.
        */
        case data_loss = 15
        /**
        UNAUTHENTICATED.
        */
        case unauthenticated = 16
    }

    /**
    Whether this is a received or sent message.
    */
    /// - Tag: otelMessageTypeValues
    public enum MessageTypeValues: String {
        /**
        sent.
        */
        case sent = "SENT"
        /**
        received.
        */
        case received = "RECEIVED"
    }

    /**
    The [error codes](https://connect.build/docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
    */
    /// - Tag: otelRpcConnectRpcErrorCodeValues
    public enum RpcConnectRpcErrorCodeValues: String {
        /**
        cancelled.
        */
        case cancelled
        /**
        unknown.
        */
        case unknown
        /**
        invalid_argument.
        */
        case invalid_argument = "invalid_argument"
        /**
        deadline_exceeded.
        */
        case deadline_exceeded = "deadline_exceeded"
        /**
        not_found.
        */
        case not_found = "not_found"
        /**
        already_exists.
        */
        case already_exists = "already_exists"
        /**
        permission_denied.
        */
        case permission_denied = "permission_denied"
        /**
        resource_exhausted.
        */
        case resource_exhausted = "resource_exhausted"
        /**
        failed_precondition.
        */
        case failed_precondition = "failed_precondition"
        /**
        aborted.
        */
        case aborted = "aborted"
        /**
        out_of_range.
        */
        case out_of_range = "out_of_range"
        /**
        unimplemented.
        */
        case unimplemented = "unimplemented"
        /**
        internal.
        */
        case `internal` = "internal"
        /**
        unavailable.
        */
        case unavailable = "unavailable"
        /**
        data_loss.
        */
        case data_loss = "data_loss"
        /**
        unauthenticated.
        */
        case unauthenticated = "unauthenticated"
    }

}
