/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */
// DO **NOT** EDIT. This file is automatically generated.

import Foundation

public enum ResourceAttributes: String {
  /**
    Array of brand name and version separated by a space.

    ~~~
    // Examplesattributes[.browserBrands] =  Not A;Brand 99attributes[.browserBrands] = Chromium 99attributes[.browserBrands] = Chrome 99
    ~~~

    - Note: This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.brands`).
    - Requires: Value type should be `[String]`
    */
  case browserBrands = "browser.brands"
  /**
    The platform on which the browser is running.

    ~~~
    // Examples
    attributes[.browserPlatform] = "Windows"
    attributes[.browserPlatform] = "macOS"
    attributes[.browserPlatform] = "Android"
    ~~~

    - Note: This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.platform`). If unavailable, the legacy `navigator.platform` API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.
      The list of possible values is defined in the [W3C User-Agent Client Hints specification](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform). Note that some (but not all) of these values can overlap with values in the [`os.type` and `os.name` attributes](./os.md). However, for consistency, the values in the `browser.platform` attribute should capture the exact value that the user agent provides.
    - Requires: Value type should be `String`
    */
  case browserPlatform = "browser.platform"
  /**
    A boolean that is true if the browser is running on a mobile device.

    - Note: This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.mobile`). If unavailable, this attribute SHOULD be left unset.
    - Requires: Value type should be `Bool`
    */
  case browserMobile = "browser.mobile"
  /**
    Preferred language of the user using the browser.

    ~~~
    // Examples
    attributes[.browserLanguage] = "en"
    attributes[.browserLanguage] = "en-US"
    attributes[.browserLanguage] = "fr"
    attributes[.browserLanguage] = "fr-FR"
    ~~~

    - Note: This value is intended to be taken from the Navigator API `navigator.language`.
    - Requires: Value type should be `String`
    */
  case browserLanguage = "browser.language"
  /**
    Full user-agent string provided by the browser.

    ~~~
    // Examples
    attributes[.userAgentOriginal] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36"
    ~~~

    - Note: The user-agent value SHOULD be provided only from browsers that do not have a mechanism to retrieve brands and platform individually from the User-Agent Client Hints API. To retrieve the value, the legacy `navigator.userAgent` API can be used.
    - Requires: Value type should be `String`
    */
  case userAgentOriginal = "user_agent.original"
  /**
    Name of the cloud provider.
    - Requires: Value should be one of [`ResourceAttributes.CloudProviderValues`](x-source-tag://otelCloudProviderValues) (of type `String`)
    */
  case cloudProvider = "cloud.provider"
  /**
    The cloud account ID the resource is assigned to.

    ~~~
    // Examples
    attributes[.cloudAccountId] = "111111111111"
    attributes[.cloudAccountId] = "opentelemetry"
    ~~~
    - Requires: Value type should be `String`
    */
  case cloudAccountId = "cloud.account.id"
  /**
    The geographical region the resource is running.

    ~~~
    // Examples
    attributes[.cloudRegion] = "us-central1"
    attributes[.cloudRegion] = "us-east-1"
    ~~~

    - Note: Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).
    - Requires: Value type should be `String`
    */
  case cloudRegion = "cloud.region"
  /**
    Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/en-us/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP).

    ~~~
    // Examples
    attributes[.cloudResourceId] = "arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function"
    attributes[.cloudResourceId] = "//run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID"
    attributes[.cloudResourceId] = "/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>"
    ~~~

    - Note: On some cloud providers, it may not be possible to determine the full ID at startup,
      so it may be necessary to set `cloud.resource_id` as a span attribute instead.

      The exact value to use for `cloud.resource_id` depends on the cloud provider.
      The following well-known definitions MUST be used if you set this attribute and they apply:

      * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        Take care not to use the "invoked ARN" directly but replace any
        [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)
        with the resolved function version, as the same runtime instance may be invokable with
        multiple different aliases.
      * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
      * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id) of the invoked function,
        *not* the function app, having the form
        `/subscriptions/<SUBSCIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.
        This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        a TracerProvider.
    - Requires: Value type should be `String`
    */
  case cloudResourceId = "cloud.resource_id"
  /**
    Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.

    ~~~
    // Examples
    attributes[.cloudAvailabilityZone] = "us-east-1c"
    ~~~

    - Note: Availability zones are called "zones" on Alibaba Cloud and Google Cloud.
    - Requires: Value type should be `String`
    */
  case cloudAvailabilityZone = "cloud.availability_zone"
  /**
    The cloud platform in use.

    - Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
    - Requires: Value should be one of [`ResourceAttributes.CloudPlatformValues`](x-source-tag://otelCloudPlatformValues) (of type `String`)
    */
  case cloudPlatform = "cloud.platform"
  /**
    The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).

    ~~~
    // Examples
    attributes[.awsEcsContainerArn] = "arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9"
    ~~~
    - Requires: Value type should be `String`
    */
  case awsEcsContainerArn = "aws.ecs.container.arn"
  /**
    The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).

    ~~~
    // Examples
    attributes[.awsEcsClusterArn] = "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
    ~~~
    - Requires: Value type should be `String`
    */
  case awsEcsClusterArn = "aws.ecs.cluster.arn"
  /**
    The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
    - Requires: Value should be one of [`ResourceAttributes.AwsEcsLaunchtypeValues`](x-source-tag://otelAwsEcsLaunchtypeValues) (of type `String`)
    */
  case awsEcsLaunchtype = "aws.ecs.launchtype"
  /**
    The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).

    ~~~
    // Examples
    attributes[.awsEcsTaskArn] = "arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b"
    ~~~
    - Requires: Value type should be `String`
    */
  case awsEcsTaskArn = "aws.ecs.task.arn"
  /**
    The task definition family this task definition is a member of.

    ~~~
    // Examples
    attributes[.awsEcsTaskFamily] = "opentelemetry-family"
    ~~~
    - Requires: Value type should be `String`
    */
  case awsEcsTaskFamily = "aws.ecs.task.family"
  /**
    The revision for this task definition.

    ~~~
    // Examples
    attributes[.awsEcsTaskRevision] = "8"
    attributes[.awsEcsTaskRevision] = "26"
    ~~~
    - Requires: Value type should be `String`
    */
  case awsEcsTaskRevision = "aws.ecs.task.revision"
  /**
    The ARN of an EKS cluster.

    ~~~
    // Examples
    attributes[.awsEksClusterArn] = "arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster"
    ~~~
    - Requires: Value type should be `String`
    */
  case awsEksClusterArn = "aws.eks.cluster.arn"
  /**
    The name(s) of the AWS log group(s) an application is writing to.

    ~~~
    // Examplesattributes[.awsLogGroupNames] = /aws/lambda/my-functionattributes[.awsLogGroupNames] = opentelemetry-service
    ~~~

    - Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.
    - Requires: Value type should be `[String]`
    */
  case awsLogGroupNames = "aws.log.group.names"
  /**
    The Amazon Resource Name(s) (ARN) of the AWS log group(s).

    ~~~
    // Examplesattributes[.awsLogGroupArns] = arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*
    ~~~

    - Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).
    - Requires: Value type should be `[String]`
    */
  case awsLogGroupArns = "aws.log.group.arns"
  /**
    The name(s) of the AWS log stream(s) an application is writing to.

    ~~~
    // Examplesattributes[.awsLogStreamNames] = logs/main/10838bed-421f-43ef-870a-f43feacbbb5b
    ~~~
    - Requires: Value type should be `[String]`
    */
  case awsLogStreamNames = "aws.log.stream.names"
  /**
    The ARN(s) of the AWS log stream(s).

    ~~~
    // Examplesattributes[.awsLogStreamArns] = arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b
    ~~~

    - Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.
    - Requires: Value type should be `[String]`
    */
  case awsLogStreamArns = "aws.log.stream.arns"
  /**
    The name of the Cloud Run [execution](https://cloud.google.com/run/docs/managing/job-executions) being run for the Job, as set by the [`CLOUD_RUN_EXECUTION`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.

    ~~~
    // Examples
    attributes[.gcpCloudRunJobExecution] = "job-name-xxxx"
    attributes[.gcpCloudRunJobExecution] = "sample-job-mdw84"
    ~~~
    - Requires: Value type should be `String`
    */
  case gcpCloudRunJobExecution = "gcp.cloud_run.job.execution"
  /**
    The index for a task within an execution as provided by the [`CLOUD_RUN_TASK_INDEX`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.

    ~~~
    // Examplesattributes[.gcpCloudRunJobTaskIndex] = 0attributes[.gcpCloudRunJobTaskIndex] = 1
    ~~~
    - Requires: Value type should be `Int`
    */
  case gcpCloudRunJobTaskIndex = "gcp.cloud_run.job.task_index"
  /**
    The instance name of a GCE instance. This is the value provided by `host.name`, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the [default internal DNS name](https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names).

    ~~~
    // Examples
    attributes[.gcpGceInstanceName] = "instance-1"
    attributes[.gcpGceInstanceName] = "my-vm-name"
    ~~~
    - Requires: Value type should be `String`
    */
  case gcpGceInstanceName = "gcp.gce.instance.name"
  /**
    The hostname of a GCE instance. This is the full value of the default or [custom hostname](https://cloud.google.com/compute/docs/instances/custom-hostname-vm).

    ~~~
    // Examples
    attributes[.gcpGceInstanceHostname] = "my-host1234.example.com"
    attributes[.gcpGceInstanceHostname] = "sample-vm.us-west1-b.c.my-project.internal"
    ~~~
    - Requires: Value type should be `String`
    */
  case gcpGceInstanceHostname = "gcp.gce.instance.hostname"
  /**
    Time and date the release was created.

    ~~~
    // Examples
    attributes[.herokuReleaseCreationTimestamp] = "2022-10-23T18:00:42Z"
    ~~~
    - Requires: Value type should be `String`
    */
  case herokuReleaseCreationTimestamp = "heroku.release.creation_timestamp"
  /**
    Commit hash for the current release.

    ~~~
    // Examples
    attributes[.herokuReleaseCommit] = "e6134959463efd8966b20e75b913cafe3f5ec"
    ~~~
    - Requires: Value type should be `String`
    */
  case herokuReleaseCommit = "heroku.release.commit"
  /**
    Unique identifier for the application.

    ~~~
    // Examples
    attributes[.herokuAppId] = "2daa2797-e42b-4624-9322-ec3f968df4da"
    ~~~
    - Requires: Value type should be `String`
    */
  case herokuAppId = "heroku.app.id"
  /**
    Container name used by container runtime.

    ~~~
    // Examples
    attributes[.containerName] = "opentelemetry-autoconf"
    ~~~
    - Requires: Value type should be `String`
    */
  case containerName = "container.name"
  /**
    Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.

    ~~~
    // Examples
    attributes[.containerId] = "a3bf90e006b2"
    ~~~
    - Requires: Value type should be `String`
    */
  case containerId = "container.id"
  /**
    The container runtime managing this container.

    ~~~
    // Examples
    attributes[.containerRuntime] = "docker"
    attributes[.containerRuntime] = "containerd"
    attributes[.containerRuntime] = "rkt"
    ~~~
    - Requires: Value type should be `String`
    */
  case containerRuntime = "container.runtime"
  /**
    Name of the image the container was built on.

    ~~~
    // Examples
    attributes[.containerImageName] = "gcr.io/opentelemetry/operator"
    ~~~
    - Requires: Value type should be `String`
    */
  case containerImageName = "container.image.name"
  /**
    Container image tag.

    ~~~
    // Examples
    attributes[.containerImageTag] = "0.1"
    ~~~
    - Requires: Value type should be `String`
    */
  case containerImageTag = "container.image.tag"
  /**
    Runtime specific image identifier. Usually a hash algorithm followed by a UUID.

    ~~~
    // Examples
    attributes[.containerImageId] = "sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f"
    ~~~

    - Note: Docker defines a sha256 of the image id; `container.image.id` corresponds to the `Image` field from the Docker container inspect [API](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect) endpoint.
      K8s defines a link to the container registry repository with digest `"imageID": "registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625"`.
      OCI defines a digest of manifest.
    - Requires: Value type should be `String`
    */
  case containerImageId = "container.image.id"
  /**
    The command used to run the container (i.e. the command name).

    ~~~
    // Examples
    attributes[.containerCommand] = "otelcontribcol"
    ~~~

    - Note: If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.
    - Requires: Value type should be `String`
    */
  case containerCommand = "container.command"
  /**
    The full command run by the container as a single string representing the full command. [2].

    ~~~
    // Examples
    attributes[.containerCommandLine] = "otelcontribcol --config config.yaml"
    ~~~
    - Requires: Value type should be `String`
    */
  case containerCommandLine = "container.command_line"
  /**
    All the command arguments (including the command/executable itself) run by the container. [2].

    ~~~
    // Examplesattributes[.containerCommandArgs] = otelcontribcol, --config, config.yaml
    ~~~
    - Requires: Value type should be `[String]`
    */
  case containerCommandArgs = "container.command_args"
  /**
    Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).

    ~~~
    // Examples
    attributes[.deploymentEnvironment] = "staging"
    attributes[.deploymentEnvironment] = "production"
    ~~~
    - Requires: Value type should be `String`
    */
  case deploymentEnvironment = "deployment.environment"
  /**
    A unique identifier representing the device.

    ~~~
    // Examples
    attributes[.deviceId] = "2ab2916d-a51f-4ac8-80ee-45ac31a28092"
    ~~~

    - Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.
    - Requires: Value type should be `String`
    */
  case deviceId = "device.id"
  /**
    The model identifier for the device.

    ~~~
    // Examples
    attributes[.deviceModelIdentifier] = "iPhone3,4"
    attributes[.deviceModelIdentifier] = "SM-G920F"
    ~~~

    - Note: It's recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.
    - Requires: Value type should be `String`
    */
  case deviceModelIdentifier = "device.model.identifier"
  /**
    The marketing name for the device model.

    ~~~
    // Examples
    attributes[.deviceModelName] = "iPhone 6s Plus"
    attributes[.deviceModelName] = "Samsung Galaxy S6"
    ~~~

    - Note: It's recommended this value represents a human readable version of the device model rather than a machine readable alternative.
    - Requires: Value type should be `String`
    */
  case deviceModelName = "device.model.name"
  /**
    The name of the device manufacturer.

    ~~~
    // Examples
    attributes[.deviceManufacturer] = "Apple"
    attributes[.deviceManufacturer] = "Samsung"
    ~~~

    - Note: The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps SHOULD hardcode the value `Apple`.
    - Requires: Value type should be `String`
    */
  case deviceManufacturer = "device.manufacturer"
  /**
    The name of the single function that this runtime instance executes.

    ~~~
    // Examples
    attributes[.faasName] = "my-function"
    attributes[.faasName] = "myazurefunctionapp/some-function-name"
    ~~~

    - Note: This is the name of the function as configured/deployed on the FaaS
      platform and is usually different from the name of the callback
      function (which may be stored in the
      [`code.namespace`/`code.function`](/docs/general/general-attributes.md#source-code-attributes)
      span attributes).

      For some cloud providers, the above definition is ambiguous. The following
      definition of function name MUST be used for this attribute
      (and consequently the span name) for the listed cloud providers/products:

      * **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name
        followed by a forward slash followed by the function name (this form
        can also be seen in the resource JSON for the function).
        This means that a span attribute MUST be used, as an Azure function
        app can host multiple functions that would usually share
        a TracerProvider (see also the `cloud.resource_id` attribute).
    - Requires: Value type should be `String`
    */
  case faasName = "faas.name"
  /**
    The immutable version of the function being executed.

    ~~~
    // Examples
    attributes[.faasVersion] = "26"
    attributes[.faasVersion] = "pinkfroid-00002"
    ~~~

    - Note: Depending on the cloud provider and platform, use:

      * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)
        (an integer represented as a decimal string).
      * **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)
        (i.e., the function name plus the revision suffix).
      * **Google Cloud Functions:** The value of the
        [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).
      * **Azure Functions:** Not applicable. Do not set this attribute.
    - Requires: Value type should be `String`
    */
  case faasVersion = "faas.version"
  /**
    The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.

    ~~~
    // Examples
    attributes[.faasInstance] = "2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de"
    ~~~

    - Note: * **AWS Lambda:** Use the (full) log stream name.
    - Requires: Value type should be `String`
    */
  case faasInstance = "faas.instance"
  /**
    The amount of memory available to the serverless function converted to Bytes.

    ~~~
    // Examplesattributes[.faasMaxMemory] = 134217728
    ~~~

    - Note: It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).
    - Requires: Value type should be `Int`
    */
  case faasMaxMemory = "faas.max_memory"
  /**
    Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.

    ~~~
    // Examples
    attributes[.hostId] = "fdbf79e8af94cb7f9e8df36789187052"
    ~~~
    - Requires: Value type should be `String`
    */
  case hostId = "host.id"
  /**
    Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.

    ~~~
    // Examples
    attributes[.hostName] = "opentelemetry-test"
    ~~~
    - Requires: Value type should be `String`
    */
  case hostName = "host.name"
  /**
    Type of host. For Cloud, this must be the machine type.

    ~~~
    // Examples
    attributes[.hostType] = "n1-standard-1"
    ~~~
    - Requires: Value type should be `String`
    */
  case hostType = "host.type"
  /**
    The CPU architecture the host system is running on.
    - Requires: Value should be one of [`ResourceAttributes.HostArchValues`](x-source-tag://otelHostArchValues) (of type `String`)
    */
  case hostArch = "host.arch"
  /**
    Name of the VM image or OS install the host was instantiated from.

    ~~~
    // Examples
    attributes[.hostImageName] = "infra-ami-eks-worker-node-7d4ec78312"
    attributes[.hostImageName] = "CentOS-8-x86_64-1905"
    ~~~
    - Requires: Value type should be `String`
    */
  case hostImageName = "host.image.name"
  /**
    VM image ID or host OS image ID. For Cloud, this value is from the provider.

    ~~~
    // Examples
    attributes[.hostImageId] = "ami-07b06b442921831e5"
    ~~~
    - Requires: Value type should be `String`
    */
  case hostImageId = "host.image.id"
  /**
    The version string of the VM image or host OS as defined in [Version Attributes](README.md#version-attributes).

    ~~~
    // Examples
    attributes[.hostImageVersion] = "0.1"
    ~~~
    - Requires: Value type should be `String`
    */
  case hostImageVersion = "host.image.version"
  /**
    The name of the cluster.

    ~~~
    // Examples
    attributes[.k8sClusterName] = "opentelemetry-cluster"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sClusterName = "k8s.cluster.name"
  /**
    A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.

    ~~~
    // Examples
    attributes[.k8sClusterUid] = "218fc5a9-a5f1-4b54-aa05-46717d0ab26d"
    ~~~

    - Note: K8s does not have support for obtaining a cluster ID. If this is ever
      added, we will recommend collecting the `k8s.cluster.uid` through the
      official APIs. In the meantime, we are able to use the `uid` of the
      `kube-system` namespace as a proxy for cluster ID. Read on for the
      rationale.

      Every object created in a K8s cluster is assigned a distinct UID. The
      `kube-system` namespace is used by Kubernetes itself and will exist
      for the lifetime of the cluster. Using the `uid` of the `kube-system`
      namespace is a reasonable proxy for the K8s ClusterID as it will only
      change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
      UUIDs as standardized by
      [ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).
      Which states:

      > If generated according to one of the mechanisms defined in Rec.
        ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
        different from all other UUIDs generated before 3603 A.D., or is
        extremely likely to be different (depending on the mechanism chosen).

      Therefore, UIDs between clusters should be extremely unlikely to
      conflict.
    - Requires: Value type should be `String`
    */
  case k8sClusterUid = "k8s.cluster.uid"
  /**
    The name of the Node.

    ~~~
    // Examples
    attributes[.k8sNodeName] = "node-1"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sNodeName = "k8s.node.name"
  /**
    The UID of the Node.

    ~~~
    // Examples
    attributes[.k8sNodeUid] = "1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sNodeUid = "k8s.node.uid"
  /**
    The name of the namespace that the pod is running in.

    ~~~
    // Examples
    attributes[.k8sNamespaceName] = "default"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sNamespaceName = "k8s.namespace.name"
  /**
    The UID of the Pod.

    ~~~
    // Examples
    attributes[.k8sPodUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sPodUid = "k8s.pod.uid"
  /**
    The name of the Pod.

    ~~~
    // Examples
    attributes[.k8sPodName] = "opentelemetry-pod-autoconf"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sPodName = "k8s.pod.name"
  /**
    The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).

    ~~~
    // Examples
    attributes[.k8sContainerName] = "redis"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sContainerName = "k8s.container.name"
  /**
    Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.

    ~~~
    // Examplesattributes[.k8sContainerRestartCount] = 0attributes[.k8sContainerRestartCount] = 2
    ~~~
    - Requires: Value type should be `Int`
    */
  case k8sContainerRestartCount = "k8s.container.restart_count"
  /**
    The UID of the ReplicaSet.

    ~~~
    // Examples
    attributes[.k8sReplicasetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sReplicasetUid = "k8s.replicaset.uid"
  /**
    The name of the ReplicaSet.

    ~~~
    // Examples
    attributes[.k8sReplicasetName] = "opentelemetry"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sReplicasetName = "k8s.replicaset.name"
  /**
    The UID of the Deployment.

    ~~~
    // Examples
    attributes[.k8sDeploymentUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sDeploymentUid = "k8s.deployment.uid"
  /**
    The name of the Deployment.

    ~~~
    // Examples
    attributes[.k8sDeploymentName] = "opentelemetry"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sDeploymentName = "k8s.deployment.name"
  /**
    The UID of the StatefulSet.

    ~~~
    // Examples
    attributes[.k8sStatefulsetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sStatefulsetUid = "k8s.statefulset.uid"
  /**
    The name of the StatefulSet.

    ~~~
    // Examples
    attributes[.k8sStatefulsetName] = "opentelemetry"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sStatefulsetName = "k8s.statefulset.name"
  /**
    The UID of the DaemonSet.

    ~~~
    // Examples
    attributes[.k8sDaemonsetUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sDaemonsetUid = "k8s.daemonset.uid"
  /**
    The name of the DaemonSet.

    ~~~
    // Examples
    attributes[.k8sDaemonsetName] = "opentelemetry"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sDaemonsetName = "k8s.daemonset.name"
  /**
    The UID of the Job.

    ~~~
    // Examples
    attributes[.k8sJobUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sJobUid = "k8s.job.uid"
  /**
    The name of the Job.

    ~~~
    // Examples
    attributes[.k8sJobName] = "opentelemetry"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sJobName = "k8s.job.name"
  /**
    The UID of the CronJob.

    ~~~
    // Examples
    attributes[.k8sCronjobUid] = "275ecb36-5aa8-4c2a-9c47-d8bb681b9aff"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sCronjobUid = "k8s.cronjob.uid"
  /**
    The name of the CronJob.

    ~~~
    // Examples
    attributes[.k8sCronjobName] = "opentelemetry"
    ~~~
    - Requires: Value type should be `String`
    */
  case k8sCronjobName = "k8s.cronjob.name"
  /**
    The operating system type.
    - Requires: Value should be one of [`ResourceAttributes.OsTypeValues`](x-source-tag://otelOsTypeValues) (of type `String`)
    */
  case osType = "os.type"
  /**
    Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.

    ~~~
    // Examples
    attributes[.osDescription] = "Microsoft Windows [Version 10.0.18363.778]"
    attributes[.osDescription] = "Ubuntu 18.04.1 LTS"
    ~~~
    - Requires: Value type should be `String`
    */
  case osDescription = "os.description"
  /**
    Human readable operating system name.

    ~~~
    // Examples
    attributes[.osName] = "iOS"
    attributes[.osName] = "Android"
    attributes[.osName] = "Ubuntu"
    ~~~
    - Requires: Value type should be `String`
    */
  case osName = "os.name"
  /**
    The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).

    ~~~
    // Examples
    attributes[.osVersion] = "14.2.1"
    attributes[.osVersion] = "18.04.1"
    ~~~
    - Requires: Value type should be `String`
    */
  case osVersion = "os.version"
  /**
    Process identifier (PID).

    ~~~
    // Examplesattributes[.processPid] = 1234
    ~~~
    - Requires: Value type should be `Int`
    */
  case processPid = "process.pid"
  /**
    Parent Process identifier (PID).

    ~~~
    // Examplesattributes[.processParentPid] = 111
    ~~~
    - Requires: Value type should be `Int`
    */
  case processParentPid = "process.parent_pid"
  /**
    The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.

    ~~~
    // Examples
    attributes[.processExecutableName] = "otelcol"
    ~~~
    - Requires: Value type should be `String`
    */
  case processExecutableName = "process.executable.name"
  /**
    The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.

    ~~~
    // Examples
    attributes[.processExecutablePath] = "/usr/bin/cmd/otelcol"
    ~~~
    - Requires: Value type should be `String`
    */
  case processExecutablePath = "process.executable.path"
  /**
    The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.

    ~~~
    // Examples
    attributes[.processCommand] = "cmd/otelcol"
    ~~~
    - Requires: Value type should be `String`
    */
  case processCommand = "process.command"
  /**
    The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.

    ~~~
    // Examples
    attributes[.processCommandLine] = "C:\cmd\otecol --config=\"my directory\config.yaml\""
    ~~~
    - Requires: Value type should be `String`
    */
  case processCommandLine = "process.command_line"
  /**
    All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.

    ~~~
    // Examplesattributes[.processCommandArgs] = cmd/otecolattributes[.processCommandArgs] = --config=config.yaml
    ~~~
    - Requires: Value type should be `[String]`
    */
  case processCommandArgs = "process.command_args"
  /**
    The username of the user that owns the process.

    ~~~
    // Examples
    attributes[.processOwner] = "root"
    ~~~
    - Requires: Value type should be `String`
    */
  case processOwner = "process.owner"
  /**
    The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.

    ~~~
    // Examples
    attributes[.processRuntimeName] = "OpenJDK Runtime Environment"
    ~~~
    - Requires: Value type should be `String`
    */
  case processRuntimeName = "process.runtime.name"
  /**
    The version of the runtime of this process, as returned by the runtime without modification.

    ~~~
    // Examples
    attributes[.processRuntimeVersion] = "14.0.2"
    ~~~
    - Requires: Value type should be `String`
    */
  case processRuntimeVersion = "process.runtime.version"
  /**
    An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.

    ~~~
    // Examples
    attributes[.processRuntimeDescription] = "Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0"
    ~~~
    - Requires: Value type should be `String`
    */
  case processRuntimeDescription = "process.runtime.description"
  /**
    Logical name of the service.

    ~~~
    // Examples
    attributes[.serviceName] = "shoppingcart"
    ~~~

    - Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.
    - Requires: Value type should be `String`
    */
  case serviceName = "service.name"
  /**
    The version string of the service API or implementation. The format is not defined by these conventions.

    ~~~
    // Examples
    attributes[.serviceVersion] = "2.0.0"
    attributes[.serviceVersion] = "a01dbef8a"
    ~~~
    - Requires: Value type should be `String`
    */
  case serviceVersion = "service.version"
  /**
    A namespace for `service.name`.

    ~~~
    // Examples
    attributes[.serviceNamespace] = "Shop"
    ~~~

    - Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.
    - Requires: Value type should be `String`
    */
  case serviceNamespace = "service.namespace"
  /**
    The string ID of the service instance.

    ~~~
    // Examples
    attributes[.serviceInstanceId] = "my-k8s-pod-deployment-1"
    attributes[.serviceInstanceId] = "627cc493-f310-47de-96bd-71410b7dec09"
    ~~~

    - Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).
    - Requires: Value type should be `String`
    */
  case serviceInstanceId = "service.instance.id"
  /**
    The name of the telemetry SDK as defined above.

    ~~~
    // Examples
    attributes[.telemetrySdkName] = "opentelemetry"
    ~~~

    - Note: The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.
      If another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the
      `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point
      or another suitable identifier depending on the language.
      The identifier `opentelemetry` is reserved and MUST NOT be used in this case.
      All custom identifiers SHOULD be stable across different versions of an implementation.
    - Requires: Value type should be `String`
    */
  case telemetrySdkName = "telemetry.sdk.name"
  /**
    The language of the telemetry SDK.
    - Requires: Value should be one of [`ResourceAttributes.TelemetrySdkLanguageValues`](x-source-tag://otelTelemetrySdkLanguageValues) (of type `String`)
    */
  case telemetrySdkLanguage = "telemetry.sdk.language"
  /**
    The version string of the telemetry SDK.

    ~~~
    // Examples
    attributes[.telemetrySdkVersion] = "1.2.3"
    ~~~
    - Requires: Value type should be `String`
    */
  case telemetrySdkVersion = "telemetry.sdk.version"
  /**
    The version string of the auto instrumentation agent, if used.

    ~~~
    // Examples
    attributes[.telemetryAutoVersion] = "1.2.3"
    ~~~
    - Requires: Value type should be `String`
    */
  case telemetryAutoVersion = "telemetry.auto.version"
  /**
    The name of the web engine.

    ~~~
    // Examples
    attributes[.webengineName] = "WildFly"
    ~~~
    - Requires: Value type should be `String`
    */
  case webengineName = "webengine.name"
  /**
    The version of the web engine.

    ~~~
    // Examples
    attributes[.webengineVersion] = "21.0.0"
    ~~~
    - Requires: Value type should be `String`
    */
  case webengineVersion = "webengine.version"
  /**
    Additional description of the web engine (e.g. detailed version and edition information).

    ~~~
    // Examples
    attributes[.webengineDescription] = "WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final"
    ~~~
    - Requires: Value type should be `String`
    */
  case webengineDescription = "webengine.description"
  /**
    The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).

    ~~~
    // Examples
    attributes[.otelScopeName] = "io.opentelemetry.contrib.mongodb"
    ~~~
    - Requires: Value type should be `String`
    */
  case otelScopeName = "otel.scope.name"
  /**
    The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).

    ~~~
    // Examples
    attributes[.otelScopeVersion] = "1.0.0"
    ~~~
    - Requires: Value type should be `String`
    */
  case otelScopeVersion = "otel.scope.version"
  /**
    Deprecated, use the `otel.scope.name` attribute.

    ~~~
    // Examples
    attributes[.otelLibraryName] = "io.opentelemetry.contrib.mongodb"
    ~~~
    - Requires: Value type should be `String`
    */
  case otelLibraryName = "otel.library.name"
  /**
    Deprecated, use the `otel.scope.version` attribute.

    ~~~
    // Examples
    attributes[.otelLibraryVersion] = "1.0.0"
    ~~~
    - Requires: Value type should be `String`
    */
  case otelLibraryVersion = "otel.library.version"

  /**
    Name of the cloud provider.
    */
  /// - Tag: otelCloudProviderValues
  public struct CloudProviderValues: CustomStringConvertible {
    /**
        Alibaba Cloud.
        */
    public static let alibabaCloud = CloudProviderValues("alibaba_cloud")
    /**
        Amazon Web Services.
        */
    public static let aws = CloudProviderValues("aws")
    /**
        Microsoft Azure.
        */
    public static let azure = CloudProviderValues("azure")
    /**
        Google Cloud Platform.
        */
    public static let gcp = CloudProviderValues("gcp")
    /**
        Heroku Platform as a Service.
        */
    public static let heroku = CloudProviderValues("heroku")
    /**
        IBM Cloud.
        */
    public static let ibmCloud = CloudProviderValues("ibm_cloud")
    /**
        Tencent Cloud.
        */
    public static let tencentCloud = CloudProviderValues("tencent_cloud")

    internal let value: String

    public init(_ customValue: String) {
      self.value = customValue
    }

    public var description: String {
      return value
    }
  }

  /**
    The cloud platform in use.
    */
  /// - Tag: otelCloudPlatformValues
  public struct CloudPlatformValues: CustomStringConvertible {
    /**
        Alibaba Cloud Elastic Compute Service.
        */
    public static let alibabaCloudEcs = CloudPlatformValues("alibaba_cloud_ecs")
    /**
        Alibaba Cloud Function Compute.
        */
    public static let alibabaCloudFc = CloudPlatformValues("alibaba_cloud_fc")
    /**
        Red Hat OpenShift on Alibaba Cloud.
        */
    public static let alibabaCloudOpenshift = CloudPlatformValues(
      "alibaba_cloud_openshift")
    /**
        AWS Elastic Compute Cloud.
        */
    public static let awsEc2 = CloudPlatformValues("aws_ec2")
    /**
        AWS Elastic Container Service.
        */
    public static let awsEcs = CloudPlatformValues("aws_ecs")
    /**
        AWS Elastic Kubernetes Service.
        */
    public static let awsEks = CloudPlatformValues("aws_eks")
    /**
        AWS Lambda.
        */
    public static let awsLambda = CloudPlatformValues("aws_lambda")
    /**
        AWS Elastic Beanstalk.
        */
    public static let awsElasticBeanstalk = CloudPlatformValues(
      "aws_elastic_beanstalk")
    /**
        AWS App Runner.
        */
    public static let awsAppRunner = CloudPlatformValues("aws_app_runner")
    /**
        Red Hat OpenShift on AWS (ROSA).
        */
    public static let awsOpenshift = CloudPlatformValues("aws_openshift")
    /**
        Azure Virtual Machines.
        */
    public static let azureVm = CloudPlatformValues("azure_vm")
    /**
        Azure Container Instances.
        */
    public static let azureContainerInstances = CloudPlatformValues(
      "azure_container_instances")
    /**
        Azure Kubernetes Service.
        */
    public static let azureAks = CloudPlatformValues("azure_aks")
    /**
        Azure Functions.
        */
    public static let azureFunctions = CloudPlatformValues("azure_functions")
    /**
        Azure App Service.
        */
    public static let azureAppService = CloudPlatformValues("azure_app_service")
    /**
        Azure Red Hat OpenShift.
        */
    public static let azureOpenshift = CloudPlatformValues("azure_openshift")
    /**
        Google Bare Metal Solution (BMS).
        */
    public static let gcpBareMetalSolution = CloudPlatformValues(
      "gcp_bare_metal_solution")
    /**
        Google Cloud Compute Engine (GCE).
        */
    public static let gcpComputeEngine = CloudPlatformValues(
      "gcp_compute_engine")
    /**
        Google Cloud Run.
        */
    public static let gcpCloudRun = CloudPlatformValues("gcp_cloud_run")
    /**
        Google Cloud Kubernetes Engine (GKE).
        */
    public static let gcpKubernetesEngine = CloudPlatformValues(
      "gcp_kubernetes_engine")
    /**
        Google Cloud Functions (GCF).
        */
    public static let gcpCloudFunctions = CloudPlatformValues(
      "gcp_cloud_functions")
    /**
        Google Cloud App Engine (GAE).
        */
    public static let gcpAppEngine = CloudPlatformValues("gcp_app_engine")
    /**
        Red Hat OpenShift on Google Cloud.
        */
    public static let gcpOpenshift = CloudPlatformValues("gcp_openshift")
    /**
        Red Hat OpenShift on IBM Cloud.
        */
    public static let ibmCloudOpenshift = CloudPlatformValues(
      "ibm_cloud_openshift")
    /**
        Tencent Cloud Cloud Virtual Machine (CVM).
        */
    public static let tencentCloudCvm = CloudPlatformValues("tencent_cloud_cvm")
    /**
        Tencent Cloud Elastic Kubernetes Service (EKS).
        */
    public static let tencentCloudEks = CloudPlatformValues("tencent_cloud_eks")
    /**
        Tencent Cloud Serverless Cloud Function (SCF).
        */
    public static let tencentCloudScf = CloudPlatformValues("tencent_cloud_scf")

    internal let value: String

    public init(_ customValue: String) {
      self.value = customValue
    }

    public var description: String {
      return value
    }
  }

  /**
    The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
    */
  /// - Tag: otelAwsEcsLaunchtypeValues
  public enum AwsEcsLaunchtypeValues: String {
    /**
        ec2.
        */
    case ec2
    /**
        fargate.
        */
    case fargate
  }

  /**
    The CPU architecture the host system is running on.
    */
  /// - Tag: otelHostArchValues
  public struct HostArchValues: CustomStringConvertible {
    /**
        AMD64.
        */
    public static let amd64 = HostArchValues("amd64")
    /**
        ARM32.
        */
    public static let arm32 = HostArchValues("arm32")
    /**
        ARM64.
        */
    public static let arm64 = HostArchValues("arm64")
    /**
        Itanium.
        */
    public static let ia64 = HostArchValues("ia64")
    /**
        32-bit PowerPC.
        */
    public static let ppc32 = HostArchValues("ppc32")
    /**
        64-bit PowerPC.
        */
    public static let ppc64 = HostArchValues("ppc64")
    /**
        IBM z/Architecture.
        */
    public static let s390x = HostArchValues("s390x")
    /**
        32-bit x86.
        */
    public static let x86 = HostArchValues("x86")

    internal let value: String

    public init(_ customValue: String) {
      self.value = customValue
    }

    public var description: String {
      return value
    }
  }

  /**
    The operating system type.
    */
  /// - Tag: otelOsTypeValues
  public struct OsTypeValues: CustomStringConvertible {
    /**
        Microsoft Windows.
        */
    public static let windows = OsTypeValues("windows")
    /**
        Linux.
        */
    public static let linux = OsTypeValues("linux")
    /**
        Apple Darwin.
        */
    public static let darwin = OsTypeValues("darwin")
    /**
        FreeBSD.
        */
    public static let freebsd = OsTypeValues("freebsd")
    /**
        NetBSD.
        */
    public static let netbsd = OsTypeValues("netbsd")
    /**
        OpenBSD.
        */
    public static let openbsd = OsTypeValues("openbsd")
    /**
        DragonFly BSD.
        */
    public static let dragonflybsd = OsTypeValues("dragonflybsd")
    /**
        HP-UX (Hewlett Packard Unix).
        */
    public static let hpux = OsTypeValues("hpux")
    /**
        AIX (Advanced Interactive eXecutive).
        */
    public static let aix = OsTypeValues("aix")
    /**
        SunOS, Oracle Solaris.
        */
    public static let solaris = OsTypeValues("solaris")
    /**
        IBM z/OS.
        */
    public static let zOs = OsTypeValues("z_os")

    internal let value: String

    public init(_ customValue: String) {
      self.value = customValue
    }

    public var description: String {
      return value
    }
  }

  /**
    The language of the telemetry SDK.
    */
  /// - Tag: otelTelemetrySdkLanguageValues
  public struct TelemetrySdkLanguageValues: CustomStringConvertible {
    /**
        cpp.
        */
    public static let cpp = TelemetrySdkLanguageValues("cpp")
    /**
        dotnet.
        */
    public static let dotnet = TelemetrySdkLanguageValues("dotnet")
    /**
        erlang.
        */
    public static let erlang = TelemetrySdkLanguageValues("erlang")
    /**
        go.
        */
    public static let go = TelemetrySdkLanguageValues("go")
    /**
        java.
        */
    public static let java = TelemetrySdkLanguageValues("java")
    /**
        nodejs.
        */
    public static let nodejs = TelemetrySdkLanguageValues("nodejs")
    /**
        php.
        */
    public static let php = TelemetrySdkLanguageValues("php")
    /**
        python.
        */
    public static let python = TelemetrySdkLanguageValues("python")
    /**
        ruby.
        */
    public static let ruby = TelemetrySdkLanguageValues("ruby")
    /**
        rust.
        */
    public static let rust = TelemetrySdkLanguageValues("rust")
    /**
        swift.
        */
    public static let swift = TelemetrySdkLanguageValues("swift")
    /**
        webjs.
        */
    public static let webjs = TelemetrySdkLanguageValues("webjs")

    internal let value: String

    public init(_ customValue: String) {
      self.value = customValue
    }

    public var description: String {
      return value
    }
  }

}
public func == (left: ResourceAttributes, right: String) -> Bool {
  return left.rawValue == right
}

public func == (left: String, right: ResourceAttributes) -> Bool {
  return left == right.rawValue
}
